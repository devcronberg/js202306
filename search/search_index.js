var __index = {"config":{"lang":["da"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Programmering med JavaScript","text":"<p>Ud over at v\u00e6re et af de mest popul\u00e6re og benyttede programmeringssprog, er JavaScript det eneste sprog man kan benytte til at udvikle dynamisk indhold i browseren. P\u00e5 dette kursus f\u00e5r du en grundl\u00e6ggende forst\u00e5else for sproget som det benyttes i browsere. Du vil ligeledes blive introduceret til DOM (Document Object Model), som bruges til at arbejde med elementerne p\u00e5 en HTML side, samt f\u00e5 generel viden om b\u00e5de HTML5 api\u2019er og popul\u00e6re JavaScript biblioteker og frameworks.</p>"},{"location":"index.html#om-materialet","title":"Om materialet","text":"<p>Materialet er udarbejdet af Michell Cronberg og du kan finde hele materialet som en zip-fil. Bem\u00e6rk venligst, at materialet ikke m\u00e5 benyttes uden specifik tilladelse.</p> <p>Download materiale</p>"},{"location":"01Indledning.html","title":"Sproget","text":"<p>JavaScript (EcmaScript - eller ES) er verdens mest popul\u00e6re og benyttede programmeringssprog</p> <ul> <li>Popul\u00e6rt<ul> <li>Developer survey fra StackOverflow</li> </ul> </li> <li>Effektivt sprog</li> <li>\u201cSimpelt\u201d sprog</li> <li>Beh\u00e6ftet med forskellige fejl fra f\u00f8dsel som er tilrettet l\u00f8bende</li> </ul> <p>Sproget bruges overalt</p> <ul> <li>Browsere<ul> <li>Progressive Web Apps</li> </ul> </li> <li>Server/desktop<ul> <li>node.js</li> <li>electron.js</li> </ul> </li> <li>App- og automatiseringskerner<ul> <li>Google Apps</li> <li>Microsoft 365</li> <li>mv</li> </ul> </li> <li>Mobile<ul> <li>Cordova</li> <li>React Native</li> </ul> </li> <li>Hardware / IoT<ul> <li>Esprurino</li> </ul> </li> </ul>"},{"location":"01Indledning.html#paradigmer","title":"Paradigmer","text":""},{"location":"01Indledning.html#dynamisk","title":"Dynamisk","text":"<pre><code>let a = {};\na.navn = \"a\";\nconsole.log(a); // { navn: \"a\" }\ndelete a.navn;\nconsole.log(a); // { }\nlet b = new Function(\"a\", \"b\", \"return a+b;\");\n</code></pre>"},{"location":"01Indledning.html#typefrit","title":"Typefrit","text":"<pre><code>let a = 1;\nconsole.log(typeof a);\na = \"1\";\nconsole.log(typeof a);\n</code></pre>"},{"location":"01Indledning.html#funktionsorienteret","title":"Funktionsorienteret","text":"<pre><code>function findFunktion() {\nif (new Date().getMilliseconds() % 2 == 0) {\nreturn function (a, b) {\nreturn a + b;\n};\n} else {\nreturn function (a, b) {\nreturn a - b;\n};\n}\n}\nlet f = findFunktion();\nconsole.log(f(4, 4));\n</code></pre>"},{"location":"01Indledning.html#udviklingmilj-og-process","title":"Udviklingmilj\u00f8 og process","text":"<ul> <li>Editor<ul> <li>VS Code<ul> <li>Se intro VS Code</li> <li>Plugins<ul> <li>ESLint / TSLint</li> <li>Chrome debugger</li> <li>Live Server</li> <li>Prettier</li> <li>Auto Rename Tag</li> <li>CSS Formatter</li> <li>HTMLHint</li> <li>HtmlTagWrap</li> <li>Paste JSON as Code</li> </ul> </li> </ul> </li> </ul> </li> <li>Package Manager<ul> <li>NPM</li> </ul> </li> <li>WebServer<ul> <li>Typisk nodejs<ul> <li>LiveServer til VS Code</li> </ul> </li> </ul> </li> <li>Automatisering<ul> <li>NPM Scripts</li> </ul> </li> <li>Bundling og minificering<ul> <li>Webpack</li> <li>Parcel</li> </ul> </li> <li>Lintning<ul> <li>ESLint</li> <li>TSLint</li> </ul> </li> </ul>"},{"location":"01Indledning.html#syntaks","title":"Syntaks","text":"<ul> <li>C syntaks</li> <li>Instruktion<ul> <li>Semicolon (ikke n\u00f8dvendigt)</li> </ul> </li> <li>Block<ul> <li>{}</li> </ul> </li> <li>Kommentarer<ul> <li>//</li> <li>/* */</li> </ul> </li> <li>Upper/Lower case</li> <li>Brug af (bla) punktumnotationen ved brug af objekter</li> </ul> <pre><code>let obj = {};\nobj.navn = \"Mikkel\";\nobj.alder = 17;\nobj.Alder = 16; // ikke det samme som obj.alder\n// Checker alder\nif (obj.alder &lt; 17) {\nconsole.log(`${obj.navn} m\u00e5 ikke k\u00f8re bil`);\n} else {\nconsole.log(`${obj.navn} m\u00e5 gerne k\u00f8re bil`);\n}\n</code></pre>"},{"location":"02Variabler.html","title":"Variabler","text":"<p>En variabel er et omr\u00e5de i hukommeelsen, hvor man kan gemme v\u00e6rdier som man kan bruge i sin applikation. Variabler er en fundamental byggesten i ethvert programmeringssprog, og Javascript er ingen undtagelse. P\u00e5 dette modul vil du l\u00e6re om forskellige typer af variabler, hvordan man erkl\u00e6rer og tildeler v\u00e6rdier til dem, samt hvordan man kan \u00e6ndre og anvende disse v\u00e6rdier i dit program. Du vil ogs\u00e5 l\u00e6re om scope og hoisting, som er vigtige koncepter i forbindelse med variabler i Javascript.</p>"},{"location":"02Variabler.html#typefrit","title":"Typefrit","text":"<ul> <li>men internt er der typer</li> <li>string</li> <li>number</li> <li>bool</li> <li>object</li> <li>null</li> <li>undefinded</li> <li>v\u00e6rdibaserede</li> <li>immutable</li> </ul>"},{"location":"02Variabler.html#erklring","title":"Erkl\u00e6ring","text":"<ul> <li>Brug altid scrict mode (ES5)</li> <li>\u201cuse strict\u201d;<ul> <li>Alt skal erkl\u00e6res</li> <li>Har ligeledes anden betydning</li> <li>sl\u00e5 flere ting fra eksempelvis<ul> <li>eval()</li> <li>delete</li> </ul> </li> </ul> </li> </ul> <p>Dette er ok</p> <pre><code>a = 1;\n</code></pre> <p>Dette er ikke ok</p> <pre><code>\"use strict\";\na = 1; // mangler var/let\n</code></pre> <p>Uden brug af moduler er det normalt pakket ind i en IIFE</p> <pre><code>(function () {\n\"use strict\";\n})();\n</code></pre> <p>Erkl\u00e6ring med</p> <ul> <li>var</li> <li>let (ES6)</li> <li>scope</li> <li>men husk \u201cuse strict\u201d!</li> </ul> <pre><code>console.log(i); // undefinded\n// console.log(j); // ikke defineret\nconsole.log(k); // undefinded\n// console.log(l); // ikke defineret\nvar i = 1;\nlet j = 2;\nif (true) {\nvar k = 3;\nlet l = 4;\n}\nconsole.log(i); // 1\nconsole.log(j); // 2\nconsole.log(k); // 3\n// console.log(l); // ikke defineret\nconst m = 1;\n// m = 2;  // fejl\nif (true) {\nconst n = 4;\nconsole.log(n);\n}\n// console.log(n); // ikke defineret\nif (true) {\nlet o = 5;\nfunction test() {\nconsole.log(o); // 5 - closure\n}\ntest();\n}\n</code></pre>"},{"location":"02Variabler.html#interne-typer","title":"Interne typer","text":"<p>Primitive interne datatyper</p> <ul> <li>Number</li> <li>Numre</li> <li>Se BigInt senere</li> <li>Boolean</li> <li>true/false (+ truthy and falsy)</li> <li>String</li> <li>Tekster</li> <li>undefined</li> <li>bla erkl\u00e6rede variabler som endnu ikke har fundet en v\u00e6rdi</li> <li>null</li> <li>null v\u00e6rdi kan benyttes som du \u00f8nsker</li> <li>object</li> <li>datatype</li> <li>symbol</li> <li>meget \u201cintern\u201d type som blandt bruges hvor man \u00f8nsker unikke navne<ul> <li>\u201cprivate\u201d egenskaber i klasser</li> </ul> </li> </ul> <p>Ved typecheck brug evt</p> <ul> <li>typeof</li> <li>typeof()</li> <li>instanceof</li> </ul> <pre><code>let i = 1;\nconsole.log(typeof i); // number\nconsole.log(typeof i); // number\ni = true;\nconsole.log(typeof i); // boolean\ni = \"\";\nconsole.log(typeof i); // string\ni = {};\nconsole.log(typeof i); // object\ni = new Date();\nconsole.log(typeof i); // object\nconsole.log(i instanceof Date); // true\n</code></pre>"},{"location":"02Variabler.html#number-typen","title":"Number-typen","text":"<ul> <li>64 bit floating point tal</li> <li>benytter . som literal (100.23)</li> <li>et for stort tal bliver til Infinity og en fejl i beregning kan blive til NaN (not a number)</li> <li>brug evt</li> <li>toFixed()</li> <li>toString()</li> <li>toLocaleString()<ul> <li>kan v\u00e6re forskel p\u00e5 node/browser implementation</li> </ul> </li> <li>Der findes en BigInt-type men den er ikke supporteret overalt</li> </ul> <pre><code>let a = Math.pow(11, 308);\nconsole.log(a); // infinity\nlet b = 0 / 0;\nconsole.log(b); // nan\nlet c = 2342.23342234;\nconsole.log(c);\nconsole.log(c.toFixed(2));\nconsole.log(c.toString());\nconsole.log(c.toLocaleString(\"da-DK\"));\nconsole.log(\nc.toLocaleString(\"da-DK\", {\nmaximumFractionDigits: 2,\n})\n);\n</code></pre>"},{"location":"02Variabler.html#diverse","title":"Diverse","text":"<ul> <li>Math-objektet indeholder matematik funktioner</li> <li>parseInt og ParseFloat kan bruges til typekonvertering</li> </ul>"},{"location":"02Variabler.html#operatorer","title":"Operatorer","text":"<ul> <li><code>+</code></li> <li><code>-</code></li> <li><code>*</code></li> <li><code>/</code></li> <li><code>%</code></li> <li><code>++</code></li> <li><code>--</code></li> </ul>"},{"location":"02Variabler.html#boolean-typen","title":"Boolean-typen","text":"<ul> <li>Hvem var George Boole? ;)</li> <li>Kan v\u00e6re true eller false</li> <li>men false, 0, \u201c\u201d, null og undefined evalueres ogs\u00e5 til false</li> <li>alt andet evalueres til true</li> <li>\u201ctruthy and falsy values\u201d</li> <li>Brug eventuelt !! operatoren</li> </ul> <pre><code>let a;\n// true / false\na = true; // a = true\nb = false; // a = false\n// \"falsy\"\na = !!\"\"; // a = false\na = !!0; // a = false\na = !!null; // a = false\na = !!undefined; // a = false\na = !!\"x\"; // a = true\na = !!1; // a = true\na = !!2; // a = true\n// eksempler\na = \"\";\nif (a) {\nconsole.log(\"afvikles ikke fordi a evalueres til false\");\n}\na = 1;\nif (a) {\nconsole.log(\"afvikles fordi a evalueres til true\");\n}\n</code></pre>"},{"location":"02Variabler.html#operatorer_1","title":"Operatorer","text":"<p>Brug altid === eller !== ved sammenligning</p> <ul> <li>== og != laver evt typekonvering og sammenligner</li> <li>=== og !== checker f\u00f8rst p\u00e5 typen</li> </ul> <pre><code>let a = 1;\nlet b = \"1\";\nif (a == b) console.log(\"\u00f8\u00f8\u00f8h - 1 == '1' ???\");\nif (a === b) console.log(\"nej - 1 er forskellig fra '1'\");\n</code></pre> <p>Andre operatorer</p> <ul> <li><code>&lt;</code></li> <li><code>&gt;</code></li> <li><code>&gt;=</code></li> <li><code>&lt;=</code></li> <li><code>!</code></li> <li><code>&amp;&amp;</code></li> <li><code>||</code></li> </ul>"},{"location":"02Variabler.html#string-typen","title":"String-typen","text":"<ul> <li>Indeholder unicode</li> <li>Benyt \u201d eller \u2018</li> <li>Sammenl\u00e6g med +</li> <li>Sammenlign med === eller !==</li> <li>Escape karakterer</li> <li>\\b (backspace)</li> <li>\\f (formfeed)</li> <li>\\n (newline)</li> <li>\\r (carrige return)</li> <li>\\t (tab)</li> <li>\\\u201c</li> <li>\\\u2018</li> <li>\\\\</li> <li>\\uNNNN (unicode)</li> <li>String-typen indeholder naturligvis en del metoder men mange benytter diverse biblioteker</li> <li>Voca</li> </ul> <pre><code>let txt = \"Marx Brothers\";\nconsole.log(txt.length);\nconsole.log(txt.toUpperCase());\nconsole.log(txt.toLowerCase());\nconsole.log(txt.split(\" \"));\nconsole.log(txt.substring(0, 4));\nconsole.log(txt.slice(0, -5));\nconsole.log(txt.charAt(5));\n// Pas p\u00e5 ES version - brug evt polyfill\nconsole.log(txt.startsWith(\"Ma\"));\nconsole.log(txt.endsWith(\"rs\"));\nconsole.log(txt.includes(\"BRO\"));\nconsole.log(txt.repeat(2));\n/*\n13\nMARX BROTHERS\nmarx brothers\n[ 'Marx', 'Brothers' ]\nMarx\nMarx Bro\nB\ntrue\ntrue\nfalse\nMarx BrothersMarx Brothers\n*/\n</code></pre>"},{"location":"02Variabler.html#template-string","title":"Template string","text":"<ul> <li>Nem og effektv m\u00e5de at danne strenge</li> <li>Benyt \u201comvendt aprostrof\u201d</li> </ul> <pre><code>` tekst tekst `;\nog ${}\nEksempelvis\nlet txt = `Mit navn er ${navn}`;\nhvor navn er en variabel\n</code></pre> <p>Her er et par andre eksempler</p> <pre><code>let navn = \"Mathias\";\nlet bel\u00f8b = 100;\nconsole.log(navn + \" har kr \" + bel\u00f8b);\nconsole.log(navn + \" har kr \" + bel\u00f8b + \" og n\u00e6ste m\u00e5ned kr \" + bel\u00f8b * 2);\nconsole.log(`${navn} har kr ${bel\u00f8b}`);\nconsole.log(`${navn} har kr ${bel\u00f8b} og n\u00e6ste m\u00e5ned kr ${bel\u00f8b * 2}`);\nconsole.log();\nconsole.log(\npersonHTML({\nnavn: \"Mikkel\",\nsport: [\"Fodbold\", \"Fitness\"],\njob: \"T\u00f8mre\",\n})\n);\nfunction personHTML({ navn, sport, job }) {\nreturn `&lt;article class=\"person\"&gt;\n    &lt;h3&gt;${navn}&lt;/h3&gt;\n    &lt;div&gt;\n        &lt;div&gt;Hobbies:&lt;/div&gt;\n        &lt;ul&gt;\n${sport.map((sport) =&gt; `&lt;li&gt;${sport}&lt;/li&gt;`).join(\" \")}\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Current job: ${job}&lt;/p&gt;\n &lt;/article&gt;`;\n}\n/*\nMathias har kr 100\nMathias har kr 100 og n\u00e6ste m\u00e5ned kr 200\nMathias har kr 100\nMathias har kr 100 og n\u00e6ste m\u00e5ned kr 200\n&lt;article class=\"person\"&gt;\n    &lt;h3&gt;Mikkel&lt;/h3&gt;\n    &lt;div&gt;\n        &lt;div&gt;Hobbies:&lt;/div&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Fodbold&lt;/li&gt; &lt;li&gt;Fitness&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Current job: T\u00f8mre&lt;/p&gt;\n &lt;/article&gt;\n*/\n</code></pre>"},{"location":"02Variabler.html#date","title":"Date","text":"<ul> <li>Brug Date-typen til dato/tid men de fleste benytter biblioteker som eksempelvis moment.js, date-fns eller lign.</li> <li>Bem\u00e6rk at m\u00e5neder er 0 baseret</li> <li>Opret med new</li> </ul> <pre><code>let d = new Date(); // nu\nconsole.log(d.toLocaleString());\nd = new Date(\"2019-5-14 9:10\");\nconsole.log(d.toLocaleString());\nd = new Date(2019, 4, 14, 9, 10);\nconsole.log(d.toLocaleString());\nconsole.log(d.getMonth());\nconsole.log(d.getDate());\nconsole.log(d.getHours());\nd = new Date(2019, 12, 24);\n// d = 24/1-2020!!!\n</code></pre>"},{"location":"03Flow.html","title":"Flow","text":"<p>Flow-kommandoer er de kommandoer, der styrer flowet af dit program, s\u00e5som betingede udsagn og l\u00f8kker. Disse kommandoer giver dig mulighed for at styre programmets udf\u00f8relse, baseret p\u00e5 forskellige betingelser, og g\u00f8r det muligt for dit program at tr\u00e6ffe beslutninger. P\u00e5 dette modul vil du l\u00e6re om forskellige flow-kommandoer, s\u00e5som if-else-udsagn, switch-udsagn og forskellige typer af l\u00f8kker, samt hvordan du kan anvende dem i dit Javascript-program. </p>"},{"location":"03Flow.html#betingelser","title":"Betingelser","text":""},{"location":"03Flow.html#if","title":"if","text":"<p>Den typiske implementation er ja/nej:</p> <pre><code>graph LR\n  A[Start] --&gt; B{if?};\n  B --&gt;|yes| C[...];\n  B --&gt;|no| D[...];</code></pre> <pre><code>if (true) {\n}\nif (true &amp;&amp; true) {\n}\nif ((true &amp;&amp; true) || true) {\n}\n// husk - truthy/falsy\nif (!null) {\n}\nif (!undefined) {\n}\nif (!0) {\n}\nif (!\"\") {\n}\n// husk ===\nlet i = 10;\nif (i === 10) {\n}\nif (true) {\n} else {\n}\n</code></pre>"},{"location":"03Flow.html#switch","title":"switch","text":"<pre><code>flowchart LR\n  A[Start] --&gt; B{if?};\n  B --&gt;|choice| C[...];\n  B --&gt;|choice| D[...];\n  B --&gt;|choice| E[...];\n  B --&gt;|choice| F[...];</code></pre> <pre><code>let y = 1;\nvar output = \"Output: \";\nswitch (y) {\ncase 0:\noutput += \"0 \";\ncase 1:\noutput += \"1 \";\ncase 2:\noutput += \"2 \";\ncase 3:\noutput += \"3 \";\ncase 4:\noutput += \"4 \";\nbreak;\ncase 5:\noutput += \"5\";\nbreak;\ndefault:\nconsole.log(\"Kun 1-5\");\n}\nconsole.log(output); // output: 1 2 3 4\n</code></pre>"},{"location":"03Flow.html#lkker","title":"L\u00f8kker","text":"<pre><code>graph LR\nA[Start] --&gt; B(Initialization)\nB --&gt; C(Condition)\nC --&gt;|True| D(Iteration)\nD --&gt; C\nC --&gt;|False| E[End]</code></pre>"},{"location":"03Flow.html#for","title":"for","text":"<pre><code>let s = \"\";\nfor (let i = 0; i &lt; 10; i++) {\ns += i + \" \";\n}\nconsole.log(s); // 0 1 2 3 4 5 6 7 8 9\ns = \"\";\nfor (let i = 0; i &lt; 10; i += 2) {\ns += i + \" \";\n}\nconsole.log(s); // 0 2 4 6 8\ns = \"\";\nfor (let i = 10; i &gt; 0; i--) {\ns += i + \" \";\n}\nconsole.log(s); // 10 9 8 7 6 5 4 3 2 1\ns = \"\";\nfor (let i = 0; i &lt; 10; i++) {\nif (i == 4) continue;\nif (i == 7) break;\ns += i + \" \";\n}\nconsole.log(s); // 0 1 2 3 5 6\n</code></pre>"},{"location":"03Flow.html#while","title":"while","text":"<pre><code>let s = \"\";\nlet i = 0;\ndo {\ni++;\ns += `${i} `;\n} while (i &lt; 5);\nconsole.log(s); // 1 2 3 4 5\ns = \"\";\ni = 0;\nwhile (i &lt; 5) {\ni++;\ns += `${i} `;\n}\nconsole.log(s); // 1 2 3 4 5\ns = \"\";\ni = 0;\nwhile (i &lt; 5) {\ni++;\ns += `${i} `;\nif (i == 3) break;\n}\nconsole.log(s); // 1 2 3\n</code></pre>"},{"location":"04Array.html","title":"Array","text":"<p>Arrays er en vigtig del af Javascript, da de giver dig mulighed for at gemme og h\u00e5ndtere flere v\u00e6rdier i et enkelt objekt. P\u00e5 dette modul vil du l\u00e6re om forskellige m\u00e5der at oprette og manipulere arrays, s\u00e5som at tilf\u00f8je, fjerne og \u00e6ndre elementer, s\u00f8ge efter v\u00e6rdier og sortere arrays. Du vil ogs\u00e5 l\u00e6re om avancerede array-metoder, s\u00e5som map, filter og reduce, samt hvordan du kan anvende arrays i sammenh\u00e6ng med flow-kommandoer og funktioner.</p>"},{"location":"04Array.html#om-arrays-i-js","title":"Om arrays i JS","text":"<ul> <li>Er egentlig en hash-tabel men man bruger typisk numre som n\u00f8gler</li> <li>Kan initialieres med new Array eller literals []</li> <li>Kan h\u00e5ndtere mange dimensioner</li> <li>En masse medlemmer - de vigtige:<ul> <li>lenght</li> <li>push</li> <li>pop</li> </ul> </li> </ul> <pre><code>let a = new Array();\na[0] = 1;\na[1] = 2;\n// eller let a = [1, 2];\nconsole.log(a.length); // 2 (sidste index + 1)\na.push(3);\nconsole.log(a.join(\" \")); // 1 2 3\nlet b = a.pop();\nconsole.log(b); // 3\nconsole.log(a.join(\" \")); // 1 2\n</code></pre> <ul> <li>Brug af de mere avancerede metoder er en super god m\u00e5de at l\u00e6re funktionsorienteret kode</li> </ul> <pre><code>let a = [5, 1, 6, 7, 2, 13, 8];\n// Find f\u00f8rste\nlet b = a.find(function (v, i, a) {\nreturn v &gt; 5;\n});\n// eller\nb = a.find((v) =&gt; v &gt; 5);\nconsole.log(b); // 6\n// Filtrer og returner nyt array\nlet c = a.filter((v) =&gt; v &lt; 5);\nconsole.log(c.join(\" \")); // 1 2 3\n// Manipuler hvert element og returner nyt array\nlet d = a.map((v) =&gt; v * 2);\nconsole.log(d.join(\" \")); // 10 2 12 14 4 26 16\n// Findes element\nlet e = a.includes(2);\nconsole.log(e); // true\n// iterer\na.forEach((v, i) =&gt; console.log(i + \": \" + v)); // 0: 5, 1: 1, 2: 6 ...\nlet f = Array.from(\"mikkel\");\nconsole.log(f.join(\" \")); // m i k k e l\n// sorter\nlet g = a.slice(0); // kopi\ng.sort();\nconsole.log(g.join(\" \")); // 1 13 2 5 6 7 8 (hmmm...)\ng.sort((a, b) =&gt; a - b); // m\u00e5ske bedre med a &gt; b ? 1 : a &lt; b ? -1 : 0\nconsole.log(g.join(\" \")); // 1 2 5 6 7 8 13\n</code></pre> <p>Mange benytter underscore.js</p>"},{"location":"04Array.html#andre-samlinger","title":"Andre samlinger","text":"<p>Der findes nyere array-typer (ES2015-)</p> <ul> <li>Float32Array</li> <li>Float64Array</li> <li>Int8Array</li> <li>Int16Array</li> <li>Int32Array</li> <li>UInt16Array</li> <li>UInt32Array</li> </ul> <p>Som alternativ til arrays kan du bruge Set (unikke v\u00e6rdier):</p> <pre><code>const set1 = new Set([1, 2, 3, 4, 5]);\nset1.add(7);\nconsole.log(set1.size);\nconsole.log(set1.has(2));\nconsole.log(set1.has(6));\nset1.clear();\n</code></pre> <p>eller Map (n\u00f8gle/v\u00e6rdi - som Object men langt flere muligheder)</p> <pre><code>const m = new Map();\nm.set(\"a\", 10);\nm.set(\"b\", 20);\nconsole.log(m.size); // 2\nconsole.log(m.get(\"b\")); // 20\n</code></pre>"},{"location":"05RegEx.html","title":"RegEx","text":"<p>Regul\u00e6re udtryk, ogs\u00e5 kendt som Regex, er en metode til at s\u00f8ge og matche tekst ved hj\u00e6lp af et s\u00e6t regler. De giver en kraftfuld m\u00e5de at h\u00e5ndtere tekst p\u00e5, og er meget brugt i Javascript-validation, s\u00f8gning og udskiftning. P\u00e5 dette modul vil du l\u00e6re om brugen af RegEx i JavaScript men ikke om selve RegEx syntaksen.</p> <ul> <li>Brug af regular expresion er indbygget</li> <li>literals er /</li> </ul> <pre><code>let r = new RegExp(\"^\\\\d+$\");\nconsole.log(r.test(\"1\")); // true\nconsole.log(r.test(\"a\")); // false\nlet r2 = /^\\d+$/;\nconsole.log(r2.test(\"1\")); // true\nconsole.log(r2.test(\"a\")); // false\n</code></pre>"},{"location":"06Funktioner.html","title":"Funktioner","text":"<p>Funktioner er en grundl\u00e6ggende byggesten i ethvert programmeringssprog. De giver dig mulighed for at genbruge koden og organisere dit program i mindre, brugbare dele. P\u00e5 dette modul vil du l\u00e6re om, hvordan man erkl\u00e6rer og kalder funktioner, parametre og returv\u00e6rdier, samt hvordan man kan bruge arrow functions og closures i Javascript. </p>"},{"location":"06Funktioner.html#definering-af-funktioner","title":"Definering af funktioner","text":"<ul> <li>Forskellige m\u00e5der at definere en funktion<ul> <li>Frit valg (bare pas p\u00e5 hoisting)</li> </ul> </li> </ul> <pre><code>function add1(a, b) {\nreturn a + b;\n}\nlet add2 = function (a, b) {\nreturn a + b;\n};\nlet add3 = new Function(\"a\", \"b\", \"return a+b;\");\n// \"lang\" lambda\nlet add4 = (a, b) =&gt; {\nreturn a + b;\n};\n// \"kort\" lambda\nlet add5 = (a, b) =&gt; a + b;\nconsole.log(add1(1, 1)); // 2\nconsole.log(add2(1, 1)); // 2\nconsole.log(add3(1, 1)); // 2\nconsole.log(add4(1, 1)); // 2\nconsole.log(add5(1, 1)); // 2\n</code></pre>"},{"location":"06Funktioner.html#argumenter","title":"Argumenter","text":"<ul> <li>Primitive typer kopierer v\u00e6rdier (by value)</li> <li>Objekter kopierer referencer (be reference)</li> </ul> <pre><code>function f1(a) {\na = 200;\n}\nlet b = 100;\nconsole.log(b); // 100\nf1(b);\nconsole.log(b); // 100\nfunction f2(dato) {\ndato.setFullYear(2000);\n}\nlet d = new Date();\nconsole.log(d.toLocaleDateString()); // aktuel dato\nf2(d);\nconsole.log(d.toLocaleDateString()); // aktuel dato men \u00e5r = 2000\n</code></pre>"},{"location":"06Funktioner.html#intet-krav-om-argumenter","title":"Intet krav om argumenter","text":"<ul> <li>En funktion er i virkeligheden et objekt (Function) med forskellige medlemmer<ul> <li>arguments</li> </ul> </li> </ul> <pre><code>function f1(a, b, c) {}\n// helt ok\nf1();\nf1(1);\nf1(1, 2);\nf1(1, 2, 3);\nf1(1, 2, 3, 4);\nf1(1, 2, 3, 4, 5);\n</code></pre> <ul> <li>Brug arguments</li> </ul> <pre><code>function f1(a, b, c) {\n// arguments er egentlig et object - lav det om til et array\nlet ar = Array.from(arguments);\nconsole.log(ar.join(\" \"));\n// men kan ogs\u00e5 bare bruge det som et object (arguments[0], arguments[1] mv)\n}\nf1();\nf1(1); // 1\nf1(1, 2); // 1 2\nf1(1, 2, 3); // 1 2 3\nf1(1, 2, 3, 4); // 1 2 3 4\nf1(1, 2, 3, 4, 5); // 1 2 3 4 5\n</code></pre>"},{"location":"06Funktioner.html#referencer-til-funktioner","title":"Referencer til funktioner","text":"<p>JS er funktionsorienteret p\u00e5 et typesvagt niveau hvilket giver en masse muligheder (b\u00e5de + og -).</p> <pre><code>let f1 = (a, b) =&gt; a + b;\n// kald\nlet r1 = f1(1, 1);\n// reference\nlet r2 = f1;\nlet r3 = r2(1, 1);\nconsole.log(r1); // 2\nconsole.log(r2); // function f1\nconsole.log(r3); // 2\n</code></pre> <p>Is\u00e6r de mange array funktioner er gode til at \u00f8ve sig p\u00e5 funktionsorienteret kode.</p> <pre><code>let a = [1, 5, 7, 10, 3, 8];\nlet s1 = function (a, b) {\nreturn a - b;\n};\n// ta' en kopi af array og sorter\nlet a1 = a.slice(0).sort(s1); // 1 3 5 7 8 10\n// ta' en kopi af array og sorter\nlet a2 = a.slice(0).sort(function (a, b) {\nreturn a - b;\n}); // 1 3 5 7 8 10\n// ta' en kopi af array og sorter\nlet a3 = a.slice(0).sort((a, b) =&gt; a - b); // 1 3 5 7 8 10\n</code></pre> <pre><code>let add = (a, b) =&gt; a + b;\nlet sub = (a, b) =&gt; a - b;\nlet f = () =&gt; {\nlet r = Math.floor(Math.random() * 10 + 1); // \"tilf\u00e6ldigt\" tal mellem 1-10\nif (r &lt; 5) return add;\nelse return sub;\n};\nconsole.log(f()(3, 2)); // 5 eller 1\n</code></pre> <p>Man kan naturligvis ogs\u00e5 returnere referencer fra metoder.</p> <pre><code>let f = () =&gt; {\nlet r = Math.floor(Math.random() * 10 + 1); // \"tilf\u00e6ldigt\" tal mellem 1-10\nif (r &lt; 5) return (a, b) =&gt; a + b;\nelse return (a, b) =&gt; a - b;\n};\nconsole.log(f()(3, 2)); // 5 eller 1\n</code></pre>"},{"location":"06Funktioner.html#arrow-function","title":"Arrow function","text":"<ul> <li>Brug af =&gt; operator</li> <li>Alonzo Church - lambda calculus</li> </ul> <p>Regler:</p> <ul> <li>argumenter skal angives i parantes med mindre der kun er en</li> <li>hvis der kun er en operation beh\u00f8ves der ikke tuborgklammer eller return</li> <li>bedre h\u00e5ndtering af \u201cthis\u201d</li> </ul> <pre><code>let o1 = new Object();\no1.f1 = function () {\nconsole.log(this); // function\nlet f2 = function () {\nconsole.log(this); // global/undefinded\n};\nf2();\n};\no1.f1();\n</code></pre> <pre><code>let o1 = new Object();\no1.f1 = () =&gt; {\nconsole.log(this); // object\nlet f2 = () =&gt; {\nconsole.log(this); // object\n};\nf2();\n};\no1.f1();\n</code></pre>"},{"location":"06Funktioner.html#immediate-function-iife","title":"Immediate function (IIFE)","text":"<ul> <li>Funktion der afvikler sig selv</li> </ul> <pre><code>let f1 = (() =&gt; {\nconsole.log(\"f1\"); // f1\n})();\nlet f2 = (function () {\nconsole.log(\"f2\"); // f2\n})();\nlet f3 = (function (a) {\nconsole.log(\"f3 med \" + a); // f3 med 1\n})(1);\nlet f4 = (async function () {\nlet response = await fetch(\"https://dawa.aws.dk/kommuner/\");\nlet json = await response.json();\nconsole.log(json); // kommuner i DK\n})();\n</code></pre>"},{"location":"06Funktioner.html#generators","title":"Generators","text":"<ul> <li>Speciel funktion som afventer videre afvikling<ul> <li>benyttet i iterators og callbacks</li> </ul> </li> </ul> <pre><code>function loop1() {\nlet a = [];\nlet i = 0;\nwhile (i &lt; 2) {\ni++;\nconsole.log(\"*\");\na.push(i);\n}\nreturn a;\n}\nfunction* loop2() {\nlet i = 0;\nwhile (i &lt; 2) {\ni++;\nconsole.log(\"*\");\nyield i;\n}\n}\nfor (const item of loop1()) {\nconsole.log(item);\n} // * * 1 2\nfor (const item of loop2()) {\nconsole.log(item);\n} // * 1 * 2\nlet r = loop2();\nconsole.log(r.next()); // { value: 1, done: false }\nconsole.log(r.next()); // { value: 2, done: false }\nconsole.log(r.next()); // { value: undefined, done: true }\n</code></pre> <pre><code>function* foo() {\nyield \"a\";\nyield \"b\";\nyield \"c\";\n}\nfor (const val of foo()) {\nconsole.log(val);\n}\n// a\n// b\n// c\nconst [...values] = foo();\nconsole.log(values); // ['a','b','c']\n</code></pre>"},{"location":"07Fejlh%C3%A5ndtering.html","title":"Errorhandling","text":"<p>Fejlh\u00e5ndtering er en vigtig del af ethvert program, da det giver dig mulighed for at h\u00e5ndtere uventede situationer og sikre, at dit program forts\u00e6tter med at k\u00f8re korrekt. P\u00e5 dette modul vil du l\u00e6re om de forskellige typer af fejl, der kan opst\u00e5 i Javascript, s\u00e5som syntaxfejl og runtime-fejl, samt hvordan man kan h\u00e5ndtere dem ved hj\u00e6lp af try-catch-udsagn og throw-udsagn. </p>"},{"location":"07Fejlh%C3%A5ndtering.html#som-i-alle-andre-sprog","title":"Som i alle andre sprog\u2026","text":"<ul> <li>Brug try/catch/finally</li> <li>Men check for undefined og NaN<ul> <li>void = undefined</li> <li>undefined + 1 = NaN</li> </ul> </li> </ul> <pre><code>let o = {}; // new Object();\no.toString(); // ok\n/* \n  o.tostring(); // TypeError: o.tostring is not a function\n*/\ntry {\no.tostring();\n} catch (error) {\nconsole.log(error.message); // o.tostring is not a function\n} finally {\nconsole.log(\"k\u00f8rer under alle omst\u00e6ndigheder\"); // k\u00f8rer under alle omst\u00e6ndigheder\n}\n</code></pre>"},{"location":"07Fejlh%C3%A5ndtering.html#error-objektet","title":"Error-objektet","text":"<ul> <li>Forskellige implementationer men pr\u00f8v<ul> <li>message</li> <li>name</li> <li>stack</li> </ul> </li> <li>Brug log.trace</li> </ul> <pre><code>try {\no.tostring();\n} catch (error) {\nconsole.log(error.message); // o.tostring is not a function\nconsole.log(error.name); // TypeError\nconsole.log(error.stack); // Stack trace\n}\n</code></pre>"},{"location":"07Fejlh%C3%A5ndtering.html#brug-throw-til-at-smide-fejl","title":"Brug throw til at smide fejl","text":"<pre><code>function add(a, b) {\nif (arguments.length !== 2) {\nthrow new Error(\"Forkerte argumenter\");\n}\n}\ntry {\nadd(1, 2); //ok\nadd(1); // fejl\n} catch (error) {\nconsole.log(error.message); // Forkerte argumenter\n}\n</code></pre>"},{"location":"07Fejlh%C3%A5ndtering.html#fejl-bobler-op","title":"Fejl bobler op","text":"<pre><code>function f1() {\nf2();\n}\nfunction f2() {\nf3();\n}\nfunction f3() {\nthrow new Error(\"Fejl\");\n}\ntry {\nf1();\n} catch (error) {\nconsole.log(error.message);\n}\n</code></pre>"},{"location":"07Fejlh%C3%A5ndtering.html#log","title":"Log","text":"<ul> <li>Brug et godt log-framework<ul> <li>Papertrail</li> <li>trackjs</li> <li>Eller det gode gamle imagehack</li> </ul> </li> </ul> <pre><code>function log(app, tekst) {\nlet i = new Image();\ni.src = `https://log.cronberg.dk?app=${app}&amp;tekst=${tekst}`;\n}\n</code></pre>"},{"location":"07Fejlh%C3%A5ndtering.html#test","title":"Test","text":"<p>Forskellige test frameworks, tools og runners</p> <ul> <li>Jasmine</li> <li>Mocha</li> <li>PhantomJS</li> <li>Karma</li> <li>Protractor</li> <li>Selenium</li> <li>Puppeteer - headless Chrome</li> <li>Appveyor - Continuous Integration solution for Windows and Linux</li> </ul> <p>se ogs\u00e5</p> <ul> <li>AutoHotkey</li> <li>Software robotter</li> </ul>"},{"location":"08Objekter.html","title":"Objekter","text":"<p>Objekter er en vigtig byggesten i Javascript, da de giver dig mulighed for at repr\u00e6sentere og h\u00e5ndtere komplekse datastrukturer. P\u00e5 dette modul vil du l\u00e6re om, hvordan man opretter og manipulerer objekter i Javascript, s\u00e5som at tilf\u00f8je, fjerne og \u00e6ndre v\u00e6rdier. Du vil ogs\u00e5 l\u00e6re om, hvordan man kan bruge objekter i sammenh\u00e6ng med funktioner og arrays</p>"},{"location":"08Objekter.html#hvad-er-et-objekt-i-js","title":"Hvad er et objekt i JS","text":"<ul> <li>Objekter er i virkeligheden blot en hashtabel med unikke n\u00f8gler og tilh\u00f8rende v\u00e6rdier</li> <li> <p>Der er flere m\u00e5der at skabe objekterne p\u00e5</p> <ul> <li>Firkantet parentes-notation</li> <li>Punktum-notation</li> <li>Tuborgklamme-notation</li> </ul> </li> <li> <p>Objekter skabes som udgangspunkt med</p> <ul> <li>new Object()</li> <li>{}</li> </ul> </li> <li>De best\u00e5r allerede af metoder som toString() grundet sin prototype</li> </ul> <pre><code>let o1 = new Object();\nconsole.log(o1[\"toString\"]()); // object Object\nconsole.log(o1.toString()); // object Object\nlet o2 = {};\nconsole.log(o2[\"toString\"]()); // object Object\nconsole.log(o2.toString()); // object Object\n</code></pre>"},{"location":"08Objekter.html#firkantet-parentes-notation","title":"Firkantet parentes-notation","text":"<pre><code>let p1 = {};\np1[\"navn\"] = \"Mathias\";\np1[\"f\u00f8dsels\u00e5r\"] = 2006;\np1[\"estimeretAlder\"] = function () {\nreturn new Date().getFullYear() - this[\"f\u00f8dsels\u00e5r\"];\n};\np1[\"toString\"] = function () {\nconsole.log(\n`Jeg hedder ${this[\"navn\"]} og er ${this[\"estimeretAlder\"]()} gammel`\n);\n};\np1[\"toString\"](); // Jeg hedder Mathias og er 13 gammel\n</code></pre>"},{"location":"08Objekter.html#punktum-notation","title":"Punktum-notation","text":"<pre><code>let p2 = {};\np2.navn = \"Mikkel\";\np2.f\u00f8dsels\u00e5r = 2003;\np2.estimeretAlder = function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n};\np2.toString = function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`\n);\n};\np2.toString(); // Jeg hedder Mikkel og er 16 gammel\n</code></pre>"},{"location":"08Objekter.html#tuborgklamme-notation","title":"Tuborgklamme-notation","text":"<pre><code>let p3 = {\nnavn: \"Michell\",\nf\u00f8dsels\u00e5r: 1966,\nestimeretAlder: function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n},\ntoString: function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`\n);\n},\n};\np3.toString(); // Jeg hedder Michell og er 53 gammel\n</code></pre>"},{"location":"08Objekter.html#kombinering-af-notationer","title":"Kombinering af notationer","text":"<pre><code>let p4 = {};\np4[\"navn\"] = \"Lene\";\np4.f\u00f8dsels\u00e5r = 1964;\np4[\"estimeretAlder\"] = function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n};\np4.toString = function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this[\"estimeretAlder\"]()} gammel`\n);\n};\np4.toString(); // Jeg hedder Lene og er 55 gammel\n</code></pre>"},{"location":"08Objekter.html#tilfj-og-fjern-egenskaber","title":"Tilf\u00f8j og fjern egenskaber","text":"<pre><code>let p5 = {\nnavn: \"Villads\",\nf\u00f8dsels\u00e5r: 2017,\nestimeretAlder: function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n},\ntoString: function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`\n);\n},\n};\np5.toString(); // Jeg hedder Villads og er 2 gammel\np5.\u00e5rTil18 = function () {\nreturn 18 - this.f\u00f8dsels\u00e5r;\n};\ndelete p5.navn;\np5.toString(); // Jeg hedder undefined og er 2 gammel\n</code></pre>"},{"location":"08Objekter.html#gennemlb-af-ngler","title":"Genneml\u00f8b af n\u00f8gler","text":"<pre><code>let p6 = {\nnavn: \"Villads\",\nf\u00f8dsels\u00e5r: 2017,\nestimeretAlder: function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n},\ntoString: function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`\n);\n},\n};\np6.toString(); // Jeg hedder Villads og er 2 gammel\nfor (const key in p6) {\nconsole.log(key + \" = \" + typeof p6[key]);\n}\n/*\nnavn = string\nf\u00f8dsels\u00e5r = number\nestimeretAlder = function\ntoString = function\n*/\nfor (const key in p6) {\nconsole.log(`${key}: ${p6[key]}`);\n}\n/*\nnavn: Villads\nf\u00f8dsels\u00e5r: 2017\nestimeretAlder: function () {\n    return new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n  }\ntoString: function () {\n    console.log(`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`);\n  }\n*/\nfor (const key in p6) {\nif (typeof p6[key] === \"function\") {\np6[key]();\n} else {\nconsole.log(`${key}: ${p6[key]}`);\n}\n}\n/*\nnavn: Villads\nf\u00f8dsels\u00e5r: 2017\nJeg hedder Villads og er 2 gammel\n*/\n</code></pre>"},{"location":"08Objekter.html#array-af-objekter","title":"Array af objekter","text":"<pre><code>let toString = function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`\n);\n};\nlet estimeretAlder = function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n};\nlet personer = [\n{\nnavn: \"Michell\",\nf\u00f8dsels\u00e5r: 1966,\nestimeretAlder: estimeretAlder,\ntoString: toString,\n},\n{\nnavn: \"Lene\",\nf\u00f8dsels\u00e5r: 1964,\nestimeretAlder: estimeretAlder,\ntoString: toString,\n},\n];\npersoner.push({\nnavn: \"Mikkel\",\nf\u00f8dsels\u00e5r: 2003,\nestimeretAlder: estimeretAlder,\ntoString: toString,\n});\nlet m = {};\nm.navn = \"Mathias\";\nm.f\u00f8dsels\u00e5r = 2006;\nm.estimeretAlder = estimeretAlder;\nm.toString = toString;\npersoner.push(m);\nconsole.log(personer.length); // 4\nfor (var i = 0; i &lt; personer.length; i++) {\npersoner[i].toString();\n}\n/*\nJeg hedder Michell og er 53 gammel\nJeg hedder Lene og er 55 gammel\nJeg hedder Mikkel og er 16 gammel\nJeg hedder Mathias og er 13 gammel\n*/\nfor (const person of personer) {\nperson.toString();\n}\n/*\nJeg hedder Michell og er 53 gammel\nJeg hedder Lene og er 55 gammel\nJeg hedder Mikkel og er 16 gammel\nJeg hedder Mathias og er 13 gammel\n*/\n</code></pre>"},{"location":"08Objekter.html#json","title":"JSON","text":"<ul> <li>Brug JSON objektet til at serialisere (stringify) et objekt til en streng, og deserialisere (parse) fra en string til et objekt.</li> </ul> <pre><code>let toString = function () {\nconsole.log(\n`Jeg hedder ${this.navn} og er ${this.estimeretAlder()} gammel`\n);\n};\nlet estimeretAlder = function () {\nreturn new Date().getFullYear() - this.f\u00f8dsels\u00e5r;\n};\nlet personer = [\n{\nnavn: \"Michell\",\nf\u00f8dsels\u00e5r: 1966,\nestimeretAlder: estimeretAlder,\ntoString: toString,\n},\n{\nnavn: \"Lene\",\nf\u00f8dsels\u00e5r: 1964,\nestimeretAlder: estimeretAlder,\ntoString: toString,\n},\n];\nlet json = JSON.stringify(personer);\nconsole.log(json);\n// [{\"navn\":\"Michell\",\"f\u00f8dsels\u00e5r\":1966},{\"navn\":\"Lene\",\"f\u00f8dsels\u00e5r\":1964}]\nlet personer2 = JSON.parse(json);\nconsole.log(personer2); // objekt\nconsole.log(personer2.length); // 2\n</code></pre>"},{"location":"09Klasser.html","title":"Objekteret programmering","text":"<p>Objektorienteret programmering (OOP) er en programmeringsmetode, der anvender objekter og deres relationer til at modellere og l\u00f8se problemer. I Javascript kan objekter anvendes til at repr\u00e6sentere komplekse datastrukturer og fungere som klasser, der kan instantieres og arve egenskaber. </p>"},{"location":"09Klasser.html#de-nye-klasser","title":"De \u2018nye\u2019 klasser","text":"<ul> <li>En klasse i JS er egentlig ikke en klasse men i virkeligheden en \u201cconstructor function\u201d.<ul> <li>Javascript er prototype orienteret fsva OOP</li> </ul> </li> <li>Pas p\u00e5 ECMA version!!</li> </ul> <pre><code>class Person {}\nlet p = new Person();\n</code></pre> <p>er egentlig</p> <pre><code>let Person = (function () {\nfunction Person() {}\nreturn Person;\n})();\nlet p = new Person();\n</code></pre> <p>Typisk vil man benytte en transpiler som TypeScript, men for en god ordens skyld er syntaksen s\u00e5ledes:</p>"},{"location":"09Klasser.html#constructor-og-metoder","title":"constructor og metoder","text":"<pre><code>class Person {\nconstructor(navn, alder) {\nthis._navn = navn;\nthis._alder = alder;\n}\nprint() {\nconsole.log(`Jeg hedder ${this._navn} og er ${this._alder} gammel`);\n}\n}\nlet p = new Person(\"Mikkel\", 16);\np.print(); // Jeg hedder Mikkel og er 16 gammel\n</code></pre>"},{"location":"09Klasser.html#statiske-metoder","title":"Statiske metoder","text":"<pre><code>class Person {\nconstructor(navn, alder) {\nthis._navn = navn;\nthis._alder = alder;\n}\nprint() {\nconsole.log(`Jeg hedder ${this._navn} og er ${this._alder} gammel`);\n}\nstatic opretTilf\u00e6ldigPerson() {\nlet tal = Math.floor(Math.random() * 25 + 1);\nreturn new Person(String.fromCharCode(tal + 65), tal);\n}\n}\nlet p = Person.opretTilf\u00e6ldigPerson();\np.print();\n</code></pre>"},{"location":"09Klasser.html#egenskaber","title":"Egenskaber","text":"<pre><code>class Person {\nconstructor(navn, alder) {\nthis._navn = navn;\nthis._alder = alder;\n}\nprint() {\nconsole.log(`Jeg hedder ${this._navn} og er ${this._alder} gammel`);\n}\nget navn() {\n// sikkerhed, log, validering\nreturn _navn;\n}\nset navn(value) {\n// sikkerhed, log, validering\nthis._navn = value;\n}\n}\nlet p = new Person(\"Mat\", 13);\np.print(); // Jeg hedder Mat og er 13 gammel\np.navn = \"Mathias\";\np.print(); // Jeg hedder Mathias og er 13 gammel\n</code></pre>"},{"location":"09Klasser.html#nedarvning","title":"Nedarvning","text":"<pre><code>class Person {\nconstructor(navn, alder) {\nthis._navn = navn;\nthis._alder = alder;\n}\nprint() {\nconsole.log(`Jeg hedder ${this._navn} og er ${this._alder} gammel`);\n}\n}\nclass Elev extends Person {\nconstructor(navn, alder, elevId) {\nsuper(navn, alder);\nthis._elevId = elevId;\n}\nprint() {\nconsole.log(\n`Jeg hedder ${this._navn} og er ${this._alder} gammel med elevid ${this._elevId}`\n);\n}\n}\nlet e = new Elev(\"Villads\", 2, \"xyz\"); // Jeg hedder Villads og er 2 gammel med elevid xyz\ne.print();\n</code></pre>"},{"location":"10Moduler.html","title":"Moduler","text":"<p>Moduler er en metode til at organisere og strukturere koden i dit program, ved at opdele den i mindre dele, som kan importeres og eksporteres efter behov. P\u00e5 dette modul vil du l\u00e6re om, hvordan man kan oprette og organisere moduler i Javascript ved hj\u00e6lp af standarden ES6 import og export. Du vil ogs\u00e5 l\u00e6re om andre metoder til at h\u00e5ndtere moduler, s\u00e5som CommonJS og AMD.</p>"},{"location":"10Moduler.html#hvorfor-moduler","title":"Hvorfor moduler","text":"<p>I det oprindelige ECMA Script kan man udelukkende indkapsle data og funktionalitet i funktioner, og det kan g\u00f8re en st\u00f8rre kodebase meget kompleks at udvikle. Derfor har man s\u00f8gt efter muligheder for at modulalisere ES, og flere m\u00f8nstre/formater/standarder er blevet skabt.</p> <ul> <li>Closure og funktioner i \u201cren\u201d ES</li> <li>CommonJS</li> <li>AMD (Asynchronous Module Definition)</li> <li>UMD (Universal Module Definition)</li> </ul> <p>De sidste tre kr\u00e6ver en transpiler som WebPack, Browserify eller Parcel for at virke i en browser, og Node har valgt at benytte CommonJS som standard.</p> <p>Inden for de sidste par \u00e5r er ES6 moduler blevet en mulighed i alle browsere og Node s\u00e5 det er sikkert kan vej moduler i fremtiden vil blive udviklet.</p>"},{"location":"10Moduler.html#es6-moduler","title":"ES6 moduler","text":"<p>I ES6 er en .js fil et modul der som helt af sig selv er en container hvor alt er privat, og hvis man \u00f8nsker at andre skal have adgang til data og funktionalitet skal det eksporteres. Det kan ske p\u00e5 flere m\u00e5der.</p>"},{"location":"10Moduler.html#eksempel-til-node","title":"Eksempel til node","text":"<p>F\u00f8lgende eksempler kan afvikles gennem Node, som benytter .mjs filer til at definere moduler. Du kan benytte .js filer hvis der findes en package.json fil (brug npm \u2013init) med type sat til \u201cmodule\u201d.</p>"},{"location":"10Moduler.html#modul1js","title":"modul1.js","text":"<pre><code>export const a = [1, 2, 3, 4];\nexport function b() {\nreturn true;\n}\nexport class C {}\n</code></pre> <p>eller</p>"},{"location":"10Moduler.html#modul1js_1","title":"modul1.js","text":"<pre><code>const a = [1, 2, 3, 4];\nfunction b() {\nreturn true;\n}\nclass C {}\nexport { a, b, C };\n</code></pre> <p>Disse kan s\u00e5 importeres i et andet modul</p>"},{"location":"10Moduler.html#appjs","title":"app.js","text":"<pre><code>import { a, b, C } from \"./modul1.js\";\nconsole.log(a);\nconsole.log(b());\nlet c = new C();\n</code></pre> <p>eller</p>"},{"location":"10Moduler.html#appjs_1","title":"app.js","text":"<pre><code>import * as Utils from \"./modul1.js\";\nconsole.log(Utils.a);\nconsole.log(Utils.b());\nlet c = new Utils.C();\n</code></pre> <p>Der findes ligeledes \u201cdefault\u201d export som ikke kr\u00e6ver et decideret navngivet import:</p> <pre><code>const a = [1, 2, 3, 4];\nexport default { a };\n</code></pre> <pre><code>import Utils from \"./person.mjs\";\nconsole.log(Utils);\n</code></pre>"},{"location":"10Moduler.html#eksempel-til-browser","title":"Eksempel til browser","text":"<p>Her er et eksempel til afvikling i en browser (bem\u00e6rk app.js er afh\u00e6ngig af modul1 som er afh\u00e6ngig af modul2):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Overskrift fra HTML&lt;/h1&gt;\n&lt;script src=\"app.js\" type=\"module\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"10Moduler.html#appjs_2","title":"app.js","text":"<pre><code>import { tekstToUpper } from \"./modul2.js\";\ndocument.querySelector(\"h1\").innerHTML = tekstToUpper();\n</code></pre>"},{"location":"10Moduler.html#modul1js_2","title":"modul1.js","text":"<pre><code>export const tekst = \"Overskrift fra modul\";\n</code></pre>"},{"location":"10Moduler.html#modul2js","title":"modul2.js","text":"<pre><code>import { tekst } from \"./modul1.js\";\nexport function tekstToUpper() {\nreturn tekst.toUpperCase();\n}\n</code></pre>"},{"location":"11Async.html","title":"ASync","text":"<p>Asynkron programmering er en metode til at h\u00e5ndtere operationer, der kan tage tid at udf\u00f8re, s\u00e5som netv\u00e6rk og filsystem operationer, uden at blokere eksekveringen af resten af \u200b\u200bprogrammet. P\u00e5 dette modul vil du l\u00e6re om asynkrone metoder som callback-funktioner, promises og async/await i Javascript og hvordan man kan bruge dem til at h\u00e5ndtere asynkrone operationer.</p>"},{"location":"11Async.html#generelt-om-asynkron-kode","title":"Generelt om asynkron kode","text":"<p>Asynkron kode i JavaScript er typisk kodet med callback-funktioner:</p> <pre><code>const setTimeoutPromise = (ms) =&gt;\nnew Promise((resolve) =&gt; setTimeout(resolve, ms));\nconsole.log(\"start\");\nsetTimeoutPromise(2000).then(function () {\nconsole.log(\"slut\");\n});\n</code></pre> <p>Fra ES2017 er async/await dog en del af syntaksen, og det g\u00f8r koden noget mere logisk og \u201csynkron-agtig\u201d. await (som skal placeres i en async funktion) afventer at promise-objektet er afviklet. Yderligere er fejlh\u00e5ndtering simplificeret til simpel try/catch.</p> <pre><code>const setTimeoutPromise = (ms) =&gt;\nnew Promise((resolve) =&gt; setTimeout(resolve, ms));\nasync function test() {\nconsole.log(\"start\");\nlet t = await setTimeoutPromise(2000);\nconsole.log(\"slut\");\n}\ntest();\n</code></pre> <p>Flere promise-objekter kan eventuelt await\u2019es med all</p> <pre><code>const setTimeoutPromise = (ms) =&gt;\nnew Promise((resolve) =&gt; setTimeout(resolve, ms));\nasync function test() {\nconsole.log(\"start\");\nconst t1 = setTimeoutPromise(2000);\nconst t2 = setTimeoutPromise(2000);\nawait Promise.all([t1, t2]);\nconsole.log(\"slut\");\n}\ntest();\n</code></pre>"},{"location":"11Async.html#ajax","title":"AJAX","text":"<p>AJAX (Asynkron JavaScript og XML) er den gamle betegnelse for den funktionalitet i browserne som g\u00f8r det muligt at foretage HTTP kald.</p> <p>I \u00e6ldre browsere skete dette ved hj\u00e6lp af httpRequest-objektet, men i nyere browsere sker det ved hj\u00e6lp af [fetch-API}(https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). Med dette API kan du foretage alle former for HTTP kald relativt simpelt.</p>"},{"location":"11Async.html#eksempel-uden-asyncawait","title":"Eksempel uden async/await","text":""},{"location":"11Async.html#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button id=\"knap\"&gt;Knap&lt;/button&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"11Async.html#appjs","title":"app.js","text":"<pre><code>(function () {\n// hent alle kommuner i DK n\u00e5r der klikkes p\u00e5 knappen\nlet knap = document.querySelector(\"#knap\");\nknap.onclick = function () {\nfetch(\"https://dawa.aws.dk/kommuner/\")\n.then((response) =&gt; {\nresponse.json().then((json) =&gt; {\nconsole.log(json);\n});\n})\n.catch((error) =&gt; {\nconsole.log(error);\n});\n};\n})();\n</code></pre>"},{"location":"11Async.html#eksempel-med-brug-af-asyncawait","title":"Eksempel med brug af async/await","text":""},{"location":"11Async.html#indexhtml_1","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button id=\"knap\"&gt;Knap&lt;/button&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"11Async.html#appjs_1","title":"app.js","text":"<pre><code>(function () {\n// hent alle kommuner i DK n\u00e5r der klikkes p\u00e5 knappen\nlet knap = document.querySelector(\"#knap\");\nknap.onclick = async function () {\ntry {\nlet response = await fetch(\"https://dawa.aws.dk/kommuner/\");\nlet json = await response.json();\nconsole.log(json);\n} catch (error) {\nconsole.log(error);\n}\n};\n})();\n</code></pre>"},{"location":"11Async.html#biblioteker","title":"Biblioteker","text":"<p>Der findes en del biblioteker som kan g\u00f8re det nemmere at foretage HTTP kald - eksempelvis jQuery og Axios. Du kan eventuelt kigge p\u00e5 devcronberg/nodedemo som blandt andet viser brug af Axios i forskellige typer af applikationer.</p>"},{"location":"intro.html","title":"Indledning","text":"<p>Denne mappe indeholder dokumenter som blot har til form\u00e5l at introducere forskellige emner.</p>"},{"location":"introcss.html","title":"Introduktion til CSS","text":""},{"location":"introcss.html#hvad-er-css","title":"Hvad er CSS","text":"<p>CSS (Cascading Style Sheets) er et opm\u00e6rkningssprog som fort\u00e6ller hvordan browseren skal vise html/xml. Hvor indhold er defineret i HTML er design alts\u00e5 defineret i CSS.</p>"},{"location":"introcss.html#user-agent-stylesheet","title":"User Agent Stylesheet","text":"<p>N\u00e5r du skriver HTML og viser det \u201cr\u00e5t\u201d i en browser er der allerede design (overskrift, fonte, margin mv), men det er fordi browseren har et standardiseret og predefineret udgangspunkt kaldet user agent stylesheet. N\u00e5r du selv skrive CSS s\u00e5 overskriver eller tilf\u00f8jer til dette styelsheet.</p>"},{"location":"introcss.html#elementer-i-css","title":"Elementer i CSS","text":"<p>Helt grundl\u00e6ggende best\u00e5r CSS af en samling elementer som er opdelt i to ting</p> <ul> <li>en s\u00f8gedefinition (selector) som fort\u00e6ller browseren hvilke DOM elementer som skal p\u00e5virkes</li> <li>egenskaber (properties) som fort\u00e6ller browseren hvordan de skal p\u00e5virkes</li> </ul> <p></p>"},{"location":"introcss.html#syntaks","title":"Syntaks","text":"<p>En selector skal efterf\u00f8lges af tuborgklammer, og de enkelte egenskaber skal afsluttes med semikolon.</p> <p>Overordnet er browseren ligeglad med tabulering, mellemrum og linjeskift - det skal kun v\u00e6re for udviklernes skyld. Store CSS filer kan man derfor v\u00e6lge at minificere for at g\u00f8re dem s\u00e5 sm\u00e5 som muligt.</p>"},{"location":"introcss.html#knyttes-til-html","title":"Knyttes til HTML","text":"<p>CSS skal loades af browseren og defineret i den HTML det skal p\u00e5virke. Dette kan blandt andet ske</p> <ul> <li>ekstern</li> <li>i head</li> <li>inline</li> </ul> <p></p>"},{"location":"introcss.html#w3c","title":"W3C","text":"<p>CSS som oprindeligt er skabt af blandt andet\u00a0H\u00e5kon Vium Lie\u00a0og\u00a0Tim Bernes-Lee, blev i 1994 (28 \u00e5r siden) standardiseret hos\u00a0W3C.</p> <p>Fra version 3 er CSS splittet og frigivet i moduler - se\u00a0https://www.w3.org/Style/CSS/current-work. Her skal man is\u00e6r l\u00e6gge m\u00e6rke til de forskellige niveauer hos W3C:</p> Niveau Beskrivelse WD Working draft CR Candidate recommendation PR proposed recommendation REC Recommendation <p>Mange af de n\u00e6vnte moduler er ikke REC hvilket betyder, at de ikke n\u00f8dvendigvis virker i alle browsere. En god side til at v\u00e6re sikker er\u00a0https://caniuse.com, men det bedste er naturligvis test - evt. gennem\u00a0https://www.browserstack.com/.</p> <p>W3C varetager ligeledes standardisering for\u00a0mange andre web\u00a0relaterede teknologier. Herudover stiller W3C forskellige v\u00e6rkt\u00f8jer til r\u00e5dighed - herunder is\u00e6r validering af\u00a0HTML\u00a0og\u00a0CSS.</p>"},{"location":"introcss.html#css-selectors","title":"CSS Selectors","text":"<p>En CSS selector er en s\u00f8ge streng som browseren benytter til at finde de elementer der skal p\u00e5virkes af CSS.</p> <p>Det kunne eksempelvis v\u00e6re alle p-opm\u00e6rkninger:</p> <pre><code>p {\n}\n</code></pre> <p>Alle h1\u2019ere under en section:</p> <pre><code>section h1 {\n}\n</code></pre> <p>Alle elementer med klassen r\u00f8d:</p> <pre><code>.r\u00f8d {\n}\n</code></pre> <p>Elementet med \u2018knap1\u2019 som id:</p> <pre><code>#knap1 {\n}\n</code></pre> <p>Der findes et hav af andre selectors og nogle kan v\u00e6re meget avancerede.</p>"},{"location":"introcss.html#css-properties","title":"CSS properties","text":"<p>N\u00e5r f\u00f8rst elementer er fundet med en CSS selector kan de p\u00e5virkes med en masse forskellige egenskaber relateret til eksempelvis</p> <ul> <li>Farver</li> <li>M\u00f8nstre</li> <li>Fonte</li> <li>St\u00f8rrelser</li> <li>Placeringer</li> <li>Rammer</li> <li>Animationer</li> <li>Dynamiske egenskaber relateret til klient/st\u00f8rrelse</li> <li>Meget mere</li> </ul>"},{"location":"introcss.html#eksempler-pa-css","title":"Eksempler p\u00e5 CSS","text":"<p>Her er et par sm\u00e5 eksempler - men der er rigtig mange egenskaber.</p>"},{"location":"introcss.html#tekster","title":"Tekster","text":"<pre><code>p {\nfont-size: 2em;\ncolor: red;\nbackground-color: white;\nfont-style: italic;\nwidth: 200px;\n}\n</code></pre>"},{"location":"introcss.html#css-frameworks","title":"CSS Frameworks","text":"<p>I moderne websites v\u00e6lger mange at udnytte open source baserede CSS framework for p\u00e5 den m\u00e5de at f\u00e5 et nemt og effektiv udgangspunkt til design af knapper, lister, grids, sektioner og meget mere.</p> <p>De meste popul\u00e6re frameworks er</p> <ul> <li>Bootstrap</li> <li>Semantic UI\u00a0/\u00a0Fomantic UI</li> <li>Materialize</li> <li>Bulma</li> <li>UiKit</li> </ul> <p>men der er mange flere og det er lidt en religion.</p> <p>Pr\u00f8v eventuelt at lege med Semantic med udgangspunkt i f\u00f8lgende HTML/CSS og deres dokumentation til\u00a0knapper\u00a0og\u00a0Rating-modulet:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;link\nrel=\"stylesheet\"\nhref=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"\n/&gt;\n&lt;style&gt;\nbody {\nmargin: 20px;\n}\n&lt;/style&gt;\n&lt;title&gt;Min demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"ui container\"&gt;\n&lt;h1 class=\"ui header\"&gt;Min demo&lt;/h1&gt;\n&lt;div class=\"ui animated fade huge green button\" tabindex=\"0\"&gt;\n&lt;div class=\"visible content\"&gt;Se min&lt;/div&gt;\n&lt;div class=\"hidden content\"&gt;knap&lt;/div&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 20px\"&gt;\n&lt;div class=\"ui star rating\" data-rating=\"3\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(\".rating\").rating(\"enable\");\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introcss.html#utility-first-css-framework","title":"Utility-first CSS framework","text":"<p>Det er de sidste par \u00e5r blevet popul\u00e6rt at benytte utility-first CSS framework som eksempelvis\u00a0TailWind. Det er mere r\u00e5 frameworks som kr\u00e6ver lidt mere viden, men til geng\u00e6ld er man ikke h\u00e5rdt bundet til et givet design. I TailWind eksmepelvis arbejder med med predefinerede klasser som direkte matcher CSS-egenskaber.</p> <p>Her er et kort eksempel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container\"&gt;\n&lt;h1 class=\"p-5 text-5xl text-red-700 animate-pulse\"&gt;Min side&lt;/h1&gt;\n&lt;p class=\"m-5 p-5 rounded border shadow-xl border-black bg-gray-200\"&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ea, error nesciunt deserunt consequuntur, nisi, unde blanditiis aut amet deleniti odio vero dicta corrupti! Nihil minus porro inventore magnam sunt temporibus.&lt;/p&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Typisk vil man ikke benytte TailWind fra en CDN men gennem en Node-udviklingsproces. Se evt\u00a0denne gode serie\u00a0om TailWind.</p>"},{"location":"introcss.html#prv-det-selv","title":"Pr\u00f8v det selv","text":"<p>Hvis du gerne vil lege lidt med CSS kan du enten bruge nogle af de mange online \u201clegepladser\u201d som eksempelvis</p> <ul> <li>Codepen</li> <li>Code Sandbox</li> <li>Playcode</li> </ul> <p>Hvis du vil udvikle lokalt skal du bruge en teksteditor. De fleste udviklere bruger\u00a0Visual Studio Code\u00a0som er gratis og som virker p\u00e5 alle platforme. Se separat modul om Visual Studio Code og de tilh\u00f8rende extensions.</p>"},{"location":"introcss.html#video-eksempel-pa-udvikling-af-en-meget-simpel-html-side-med-css","title":"Video: Eksempel p\u00e5 udvikling af en meget simpel HTML side med CSS","text":"<p>Her er en video\u00a0som video udvikling af en simpel HTML side og tilh\u00f8rende CSS</p>"},{"location":"introcss.html#opgaver","title":"Opgaver","text":"<p>F\u00f8lgende opgaver er tilg\u00e6ngelige:</p> <ul> <li>Start p\u00e5 CSS\u00a0- Simpel CSS opgave</li> <li>CSS Framework\u00a0- Leg med Semantic UI</li> </ul>"},{"location":"introcss.html#css-pre-og-postprocessor","title":"CSS pre- og postprocessor","text":""},{"location":"introcss.html#preprocessorer","title":"Preprocessorer","text":"<p>CSS er som udgangspunkt ikke et programmeringssprog og i store CSS frameworks kan det v\u00e6re en fordel at kunne skrive CSS p\u00e5 en mere \u201cprogrammeringsm\u00e6ssig m\u00e5de\u201d. Derfor findes der flere CSS preprocessorer som i virkeligheden skal ses som en transpiler der overs\u00e6tter en syntaks til CSS. Der er is\u00e6r to meget benyttede kaldet\u00a0SASS\u00a0og\u00a0LESS.</p> <p>Eksempelvis er dette LESS kode:</p> <pre><code>@width: 10px;\n@height: @width + 10px;\n#header {\nwidth: @width;\nheight: @height;\n}\n</code></pre> <p>og det minder syntaktm\u00e6ssigt meget om CSS. Men der er tilf\u00f8jet variabler (@) og beregninger (+) s\u00e5 en transpilering vil skabe f\u00f8lgende CSS:</p> <pre><code> #header {\n  width: 10px;\n  height: 20px;\n}\n</code></pre> <p>B\u00e5de LESS og SASS tilf\u00f8jer en masse funktionalitet men efterh\u00e5nden som CSS i W3C\u2019s standard bliver mere og mere moden, vil behovet for preprocessorer bliver mindre og mindre.</p>"},{"location":"introcss.html#postprocessorer","title":"Postprocessorer","text":"<p>Hvor LESS og SASS er en del af selve udviklingsprocessen, og hj\u00e6lper med at skabe CSS under udvikling, findes der ogs\u00e5 postprocessorer som afvikles i forbindelse med distribution. Det kunne eksempelvis v\u00e6re</p> <ul> <li>Kontrol af CSS mod W3C</li> <li>Minificering (fjerner mellemrum og linjeskift)</li> <li>Transpilering af helt ny CSS tilbage til \u00e6ldre CSS for support</li> </ul> <p>Se eksempelvis\u00a0PostCSS\u00a0eller\u00a0CSSNext.</p>"},{"location":"introdom.html","title":"Introduktion til DOM","text":"<p>Samtlige browsere indeholder et API til manipulering af DOM (Document Object Model) s\u00e5ledes at HTML elementer kan tilrettes, fjernes og tilf\u00f8jes. DOM er standadiseret af W3C.</p> <p> </p> <p>Billede fra W3Schools</p> <p>Du kan v\u00e6lge at arbejde direkte med DOM gennem r\u00e5 JavaScript eller benytte biblioteker (eksempelvis jQuery) eller frameworks (eksempelvis Vue, Angular eller React).</p> <p>I den r\u00e5 form stiller browseren forskellige objekter til r\u00e5dighed</p> <ul> <li>window</li> <li>navigator</li> <li>history</li> <li>screen</li> <li>location</li> <li>document</li> <li>statiske metoder<ul> <li>alert, setInterval mv</li> </ul> </li> </ul> <p>og samtlige HTML elementer er mappet til en konkret type (HTMLButtonElement, HTMLInputElement, HTMLSpanElement, HTMLParagrahElement mv).</p>"},{"location":"introdom.html#dom-manipulation","title":"DOM manipulation","text":"<p>Der findes en masse ressourcer p\u00e5 nettet relateret til DOM men f\u00f8lgende kan fungere som en introduktion.</p>"},{"location":"introdom.html#eksempel","title":"Eksempel","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 id=\"ov\"&gt;Test&lt;/h1&gt;\n&lt;button id=\"knap\"&gt;Klik p\u00e5 mig&lt;/button&gt;\n&lt;script&gt;\n// Find knap (knap) og n\u00e5r der klikkes p\u00e5 den\n// find element (ov) og g\u00f8r det r\u00f8dt\nlet knap = document.getElementById(\"knap\");\nknap.onclick = function () {\n// Find og s\u00e6t farve\nlet a = document.getElementById(\"ov\");\na.style.color = \"red\";\n};\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introhtml.html","title":"Introduktion til HTML","text":""},{"location":"introhtml.html#hvad-er-html","title":"Hvad er HTML","text":"<p>HTML (HyperText Markup Language) er et relativt simpelt opm\u00e6rkningssprog, som har til form\u00e5l at beskrive data/indhold i en webapplikation.</p> <p>Ved hj\u00e6lp af opm\u00e6rkninger som eksempelvis</p> <pre><code>&lt;!-- paragraf --&gt;\n&lt;p&gt;test&lt;/p&gt;\n&lt;!-- link --&gt;\n&lt;p&gt;Tekst med &lt;a href=\"...\"&gt;link&lt;/a&gt;&lt;/p&gt;\n&lt;!-- billede --&gt;\n&lt;img src=\"...\" /&gt;\n</code></pre> <p>kan der blandt andet beskrives</p> <ul> <li>tekst</li> <li>links</li> <li>billeder</li> <li>formularer</li> </ul> <p>HTML beskriver ikke p\u00e5 nogen m\u00e5de design, som varetages af CSS (Cascading Style Sheets), eller dynamik, som varetages af ES (JavaScript) samt WASM (WebAssembly).</p>"},{"location":"introhtml.html#opmrkninger","title":"Opm\u00e6rkninger","text":"<p>Opm\u00e6rkninger kan enten best\u00e5 af data som eksempelvis</p> <pre><code>&lt;h1&gt;Overskrift&lt;/h1&gt;\n&lt;p&gt;tekst&lt;/p&gt;\n</code></pre> <p>eller uden data</p> <pre><code>&lt;hr /&gt;\n</code></pre> <p>og opm\u00e6rkningerne placeres i et tr\u00e6 (opm\u00e6rkninger i opm\u00e6rkning i opm\u00e6rkninger i \u2026)</p> <pre><code>&lt;section&gt;\n&lt;div&gt;\n&lt;p&gt;tekst&lt;/p&gt;\n&lt;div&gt;\n&lt;p&gt;\n                tekst\n                &lt;span&gt;tekst&lt;/span&gt;\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n</code></pre> <p>Alle opm\u00e6rkninger kan have attributter best\u00e5ende af en n\u00f8gle og en v\u00e6rdi</p> <pre><code>&lt;div id=\"minDiv\"&gt;tekst&lt;/div&gt;\n&lt;p id=\"id1\" class=\"class1 class2\" style=\"color: red\"&gt;tekst&lt;/p&gt;\n&lt;img src=\"billeder/billede1.png\" alt=\"Mit billede\" /&gt;\n</code></pre>"},{"location":"introhtml.html#mellemrum-har-ingen-betydning","title":"Mellemrum har ingen betydning","text":"<p>Hverken mellemrum eller tabuleringer har nogen betydning i HTML - de g\u00f8r det blot nemmere at l\u00e6se for \u201cos\u201d.</p> <p>S\u00e5ledes tolkes f\u00f8lgende</p> <pre><code>&lt;p&gt;Tekst Tekst&lt;/p&gt;\n&lt;div&gt;\n&lt;p&gt;Ny tekst&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>som</p> <pre><code>&lt;p&gt;Tekst Tekst&lt;/p&gt;\n&lt;div&gt;&lt;p&gt;Ny tekst&lt;/p&gt;&lt;/div&gt;\n</code></pre> <p>af browseren. Det er udelukkende et enkelt mellemrum i tekster som har betydning.</p>"},{"location":"introhtml.html#w3c","title":"W3C","text":"<p>HTML (HyperText Markup Language), som oprindeligt er skabt af blandt andet\u00a0Tim Bernes-Lee\u00a0insireret af \u00e6ldre teknologier som HyperText (Ted Nelson), blev i 1994 (28 \u00e5r siden) standardiseret hos\u00a0W3C. Herfra er der efterf\u00f8lgende frigivet mange versioner, og i skrivende stund (2020) er den seneste\u00a0version 5.2.</p> <p>W3C varetager ligeledes standardisering for\u00a0mange andre web\u00a0relaterede teknologier. Herudover stiller W3C forskellige v\u00e6rkt\u00f8jer til r\u00e5dighed - herunder is\u00e6r validering af\u00a0HTML\u00a0og\u00a0CSS.</p>"},{"location":"introhtml.html#semantik","title":"Semantik","text":"<p>Du skal se opm\u00e6rkninger som m\u00e5den at beskrive/definere data (tekst, afsnit, billeder, links mv). Nogle udviklere/designere v\u00e6lger at v\u00e6re meget explicit i brugen af opm\u00e6rkninger og benytter hele paletten af HTML. De er meget semanantiske i deres tilgang til opm\u00e6rkningerne. Andre er mere orienteret mod CSS (styling) og g\u00e5r ikke s\u00e5 meget op i de opm\u00e6rkningerne som ikke har konkret funktionalitet i browsere (som links og billeder elsempelvis).</p> <p>Eksempelvis kan en overskrift (h1), tekst (p) og en tabel (table, tr, td) skrives meget semantisk (HTML \u201cmindset\u201d):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;section&gt;\n&lt;h1&gt;Overskrift&lt;/h1&gt;\n&lt;p&gt;Paragraf med tekst&lt;/p&gt;\n&lt;table width=\"50%\"&gt;\n&lt;tr&gt;\n&lt;td&gt;R\u00e6kke 1 Kolonne 1&lt;/td&gt;\n&lt;td&gt;R\u00e6kke 1 Kolonne 2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;R\u00e6kke 2 Kolonne 1&lt;/td&gt;\n&lt;td&gt;R\u00e6kke 2 Kolonne 2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Browseren vil benytte det indbyggede stylesheet (definering af stil) kaldet \u201cuser agent stylesheet\u201d til at vise opm\u00e6rkningerne.</p> <p>Men samme side kan ogs\u00e5 skrives med et CSS \u201cmindset\u201d:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Test&lt;/title&gt;\n&lt;link\nrel=\"stylesheet\"\nhref=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"\n/&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n&lt;div class=\"ui header\"&gt;Overskrift&lt;/div&gt;\n&lt;div class=\"ui segment basic\"&gt;Paragraf med tekst&lt;/div&gt;\n&lt;div class=\"ui grid\" style=\"width: 50%\"&gt;\n&lt;div class=\"ui row\"&gt;\n&lt;div class=\"ui eight wide column\"&gt;R\u00e6kke 1 Kolonne 1&lt;/div&gt;\n&lt;div class=\"ui eight wide column\"&gt;R\u00e6kke 1 Kolonne 2&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"ui row\"&gt;\n&lt;div class=\"ui eight wide column\"&gt;R\u00e6kke 2 Kolonne 1&lt;/div&gt;\n&lt;div class=\"ui eight wide column\"&gt;R\u00e6kke 2 Kolonne 2&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Her benyttes et CSS framework kaldet\u00a0SemanticUI, som har defineret de forskellige klasse navne, men det kan v\u00e6re hvad som helst.</p> <p>Der er som udgangspunkt ingen forskel for browseren p\u00e5 brugen af semantiske opm\u00e6rkninger som h1 og p tilgang i forhold til brugen af div - det er op til udvikleren. Tit er de to ogs\u00e5 kombineret - eksempelvis</p> <pre><code>&lt;h1 class=\"ui header\"&gt;Overskrift&lt;/h1&gt;\n</code></pre> <p>Her er h1 benyttet sammen med css klasser og kunne liges\u00e5 godt v\u00e6re skrevet som</p> <pre><code>&lt;div class=\"ui header\"&gt;Overskrift&lt;/div&gt;\n</code></pre> <p>eller</p> <pre><code>&lt;p class=\"ui header\"&gt;Overskrift&lt;/p&gt;\n</code></pre> <p>De fleste v\u00e6lger at kombinere de gamle Tim Berners-Lee opm\u00e6rkninger med css klasser - alts\u00e5</p> <pre><code>&lt;h1 class=\"ui header\"&gt;Overskrift&lt;/h1&gt;\n</code></pre> <p>men det har ingen praktisk betydning relateret til browseren.</p>"},{"location":"introhtml.html#skabelon","title":"Skabelon","text":"<p>En HTML side f\u00f8lger en grundl\u00e6ggende skabelon med en html opm\u00e6rkning samt en head og en body:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;!-- ... --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- ... --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introhtml.html#doctype","title":"Doctype","text":"<p>Doctypen beskriver hvilken version af HTML browseren kan forvente.</p> <p>Tidligere var den meget specifik med henvisning til skemaer, men i dag er den mere generel.</p> <pre><code>&lt;!DOCTYPE html&gt;\n</code></pre> <p>Ovenn\u00e6vnte betyder blot, at siden er en HTML5+ side.</p>"},{"location":"introhtml.html#header","title":"Header","text":"<p>Beskriver type metadata</p> <ul> <li>meta</li> <li>css</li> <li>javascript</li> </ul> <pre><code>&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;meta name=\"description\" content=\"Min side der best\u00e5r af ....\" /&gt;\n&lt;meta name=\"keywords\" content=\"HTML, CSS, JavaScript\" /&gt;\n&lt;meta name=\"author\" content=\"Michell Cronberg\" /&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n&lt;title&gt;Min side&lt;/title&gt;\n&lt;/head&gt;\n</code></pre> <p>Nogle meta data er SEO relateret (Search Engine Optimization) medens andre er relateret til browserens forst\u00e5else af siden.</p>"},{"location":"introhtml.html#body","title":"Body","text":"<p>Best\u00e5r af opm\u00e6rkningerne til siden som renderes af browseren.</p>"},{"location":"introhtml.html#grundlggende-eksempel-pa-en-skabelon","title":"Grundl\u00e6ggende eksempel p\u00e5 en skabelon","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"da\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n&lt;title&gt;Min side&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introhtml.html#online-skabeloner","title":"Online skabeloner","text":"<p>Der findes en del skabeloner online man kan kopiere fra - b\u00e5de i \u201cren\u201d form som\u00a0HTML5 Boilerplate\u00a0eller med css som\u00a0HTML5Up\u00a0eller\u00a0ThemeForest.</p>"},{"location":"introhtml.html#grundlggende-opmrkninger","title":"Grundl\u00e6ggende opm\u00e6rkninger","text":"<p>Der findes en del opm\u00e6rkninger i HTML jf.\u00a0standard.</p>"},{"location":"introhtml.html#block-og-inline","title":"Block og Inline","text":"<p>Helt grundl\u00e6ggende kan opm\u00e6rkninger v\u00e6re enten block elementer som af browseren placeres under hinanden, og inline elementer som af browseren placeres ved siden af hinanden. Eksempelvis er p-opm\u00e6rkningen et block element</p> <pre><code>&lt;p&gt;tekst&lt;/p&gt;\n&lt;p&gt;tekst&lt;/p&gt;\n&lt;p&gt;tekst&lt;/p&gt;\n</code></pre> <p>Ovenn\u00e6vnte vil renderer tre afsnit under hinanden.</p> <p>F\u00f8lgende er eksempler p\u00e5 inline elementer</p> <pre><code>&lt;img src=\"https://cdn.cronberg.dk/kurser/div/csbog.jpg\" width=\"200\" alt=\"bog\" /&gt;\n&lt;img src=\"https://cdn.cronberg.dk/kurser/div/csbog.jpg\" width=\"200\" alt=\"bog\" /&gt;\n&lt;img src=\"https://cdn.cronberg.dk/kurser/div/csbog.jpg\" width=\"200\" alt=\"bog\" /&gt;\n</code></pre> <p>Det vil renderer tre billeder ved siden af hinanden.</p> <p>Men husk at det kan \u00e6ndres gennem css.</p>"},{"location":"introhtml.html#eksempler-pa-html","title":"Eksempler p\u00e5 HTML","text":"<p>Det ligger uden for dette modul at beskrive opm\u00e6rkningerne i detaljer, men her er et eksempel p\u00e5 en HTML-side med forskellige opm\u00e6rkninger:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Min side&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Overskrift&lt;/h1&gt;\n&lt;p&gt;Paragraf med tekst&lt;/p&gt;\n&lt;!-- Liste --&gt;\n&lt;ul&gt;\n&lt;li&gt;Element 1&lt;/li&gt;\n&lt;li&gt;Element 2&lt;/li&gt;\n&lt;li&gt;Element 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;!-- Tabel --&gt;\n&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;r\u00e6kke 1 kolonne 1&lt;/td&gt;\n&lt;td&gt;r\u00e6kke 1 kolonne 2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;r\u00e6kke 2 kolonne 1&lt;/td&gt;\n&lt;td&gt;r\u00e6kke 2 kolonne 2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;!-- Formular --&gt;\n&lt;form&gt;&lt;input type=\"text\" /&gt;&lt;button&gt;Klik p\u00e5 mig&lt;/button&gt;&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introhtml.html#prv-det-selv","title":"Pr\u00f8v det selv","text":"<p>Hvis du gerne vil lege lidt med HTML kan du enten bruge nogle af de mange online \u201clegepladser\u201d som eksempelvis</p> <ul> <li>Codepen</li> <li>Code Sandbox</li> <li>Playcode</li> </ul> <p>Hvis du vil udvikle lokalt skal du bruge en teksteditor. De fleste udviklere bruger\u00a0Visual Studio Code\u00a0som er gratis og som virker p\u00e5 alle platforme. Se separat modul om Visual Studio Code og de tilh\u00f8rende extensions.</p>"},{"location":"introhtml.html#eksempel-pa-udvikling-af-en-meget-simpel-html-side","title":"Eksempel p\u00e5 udvikling af en meget simpel HTML side","text":"<p>Her er en kort video\u00a0som viser udvikling af en meget simpel HTML side med Visual Studio Code.</p>"},{"location":"introhtml.html#diverse-vrktjer-og-ressourcer","title":"Diverse v\u00e6rkt\u00f8jer og ressourcer","text":"<p>Her er links til diverse v\u00e6rkt\u00f8jer og andre ressourcer relateret til HTML</p> <p>Tekster</p> <ul> <li>Lorem Ipsum - tekst</li> </ul> <p>Billeder</p> <ul> <li>Flickr</li> <li>Pixabay - gratis billeder</li> <li>Pexels - gratis billeder og video</li> <li>Burst - gratis billeder</li> <li>Picsum - Temp. billeder</li> <li>Unsplash</li> </ul> <p>Lyde</p> <ul> <li>SoundBible - gratis lyde</li> </ul> <p>Favicon</p> <ul> <li>Favicon - favicon baseret p\u00e5 tekst</li> <li>Gauger - favicon baseret p\u00e5 Font Awesome</li> </ul>"},{"location":"introhtml.html#opgaver","title":"Opgaver","text":"<p>F\u00f8lgende opgaver er tilg\u00e6ngelige:</p> <ul> <li>Start p\u00e5 HTML\u00a0- Dette er en meget simpel opgave der kan hj\u00e6lpe med at komme igang med HTML.</li> </ul>"},{"location":"introhtml.html#web-komponenter","title":"Web komponenter","text":"<p>Du vil muligvis falde over opm\u00e6rkninger som ikke ligner noget der kommer fra W3C - eksempelvis</p> <pre><code>&lt;p&gt;Demo af terning&lt;/p&gt;\n&lt;cronberg-dice&gt;&lt;/cronberg-dice&gt;\n</code></pre> <p>hvor \u201ccronberg-dice\u201d tydeligvis ikke er en W3C standard. Det kaldes en web komponent (Web Component) og giver mulighed for at skabe egne komponenter med indkapslet logik og design som dermed er nemme at genbruge.</p> <p>Du kan se et eksempel p\u00e5 en web komponent p\u00e5\u00a0devcronberg/WebComponentDemo\u00a0hvor ovenn\u00e6vnte terning er brugt, eller hente js-filen direkte som</p> <pre><code>&lt;script src=\"https://devcronberg.github.io/WebComponentDemo/dice.js\"&gt;&lt;/script&gt;\n</code></pre> <p>og pr\u00f8ve terningen som</p> <pre><code>&lt;cronberg-dice cheat=\"false\" debug=\"false\" value=\"1\"&gt;&lt;/cronberg-dice&gt;\n</code></pre>"},{"location":"introhtml.html#biblioteker","title":"Biblioteker","text":"<p>Der findes masser af biblioteker med web components p\u00e5 nettet - eksempelvis\u00a0webcomponents.org\u00a0eller Googles\u00a0Polymer Project</p>"},{"location":"introhtml.html#html-pre-og-postprocessor","title":"HTML pre- og postprocessor","text":""},{"location":"introhtml.html#preprocessorer","title":"Preprocessorer","text":"<p>Du vil muligvis falde over begreber som</p> <ul> <li>markdown</li> <li>pug</li> <li>haml</li> <li>slim</li> </ul> <p>Det er s\u00e5kaldte HTML preprocessorer som typisk er en definitation af en mere simpel syntaks end ren html. Til geng\u00e6ld kr\u00e6ver det en konvertering (transpilering) af den simple syntaks til html inden det kan bruges - for html er det eneste browseren forst\u00e5r.</p> <p>Eksempelvis kan f\u00f8lgende markdown</p> <pre><code># Overskrift Dette er et afsnit - v\u00e6rdi 1 - v\u00e6rdi 2 - v\u00e6rdi 3\n</code></pre> <p>konverteres til f\u00f8lgende html</p> <pre><code>&lt;h1&gt;Overskrift&lt;/h1&gt;\n&lt;p&gt;Dette er et afsnit&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;v\u00e6rdi 1&lt;/li&gt;\n&lt;li&gt;v\u00e6rdi 2&lt;/li&gt;\n&lt;li&gt;v\u00e6rdi 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>S\u00e5 det er nemmere at skrive markdown (md) end HTML- men kr\u00e6ver alts\u00e5 et ekstra step for at generere HTML.</p>"},{"location":"introhtml.html#postprocessorer","title":"Postprocessorer","text":"<p>N\u00e5r f\u00f8rst du har skrevet din HTML findes der scripts/moduler/applikationer - s\u00e5kaldte postprocessorer - som kan g\u00f8re HTML klar til drift. Det kunne eksempelvis v\u00e6re</p> <ul> <li>kontrol af HTML mod W3C (linter)</li> <li>kontrol af links og billeder</li> <li>minificering af HTML (fjerner mellemrum og linjeskift mv)</li> </ul> <p>Disse scripts er typisk en del af udviklingsprocessen i en eller anden form - m\u00e5ske afviklet i forbindelse med build.</p>"},{"location":"introhtml.html#vrktj-til-html-udvikling","title":"V\u00e6rkt\u00f8j til HTML udvikling","text":"<p>Der findes en del forskellige plugins til Chrome som kan v\u00e6re brugbare:</p> <ul> <li>Validity plugin:\u00a0https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif?hl=en-GB</li> <li>HTML Tree plugin:\u00a0https://chrome.google.com/webstore/detail/html-tree-generator/dlbbmhhaadfnbbdnjalilhdakfmiffeg</li> <li>HeadingsMap plugin:\u00a0https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi</li> </ul>"},{"location":"introhttp.html","title":"Introduktion til HTTP","text":"<p>HTTP er en forkortelse for (Hypertext Transfer Protocol) og er en Request/Response kommunikationsprotokol skabt af Tim Berners-Lee - se eventuelt http://ithistorie.cronberg.dk.</p>"},{"location":"introhttp.html#klient-server","title":"Klient / Server","text":"<p>Den oprindelige HTTP 1/1.1 er en relativ simpel tekstbaseret protokol hvor klienten foretage et request til serveren og server behandler det og returnerer et *response. Det kaldes ogs\u00e5 for en HTTP transaktion. Typisk sker kommunikation over port 80 ovenp\u00e5 TCP/IP.</p>"},{"location":"introhttp.html#stuktur","title":"Stuktur","text":"<p>Grundl\u00e6ggende best\u00e5r en request/response af</p> <ul> <li>Header</li> <li>Data</li> <li>Body</li> <li>FormData, HTML, CSS, JavaScript, JSON, XML</li> </ul>"},{"location":"introhttp.html#kommandoer","title":"Kommandoer","text":"<p>Der findes en del forskellige kommandoer men i standard webudvikling skal du kende til GET og POST. GET kommandoen bruges til at hente data fra serveren gennem en URL, og POST bruges til at sende data til serveren via en formular eller JavaScript.</p> <p>Her er et eksempel p\u00e5 en simpel HTTP 1.1 GET foresp\u00f8rgsel</p>"},{"location":"introhttp.html#request","title":"Request","text":"<pre><code>GET http://fdemo2.cronberg.dk/SimplePage HTTP/1.1\nHost: fdemo2.cronberg.dk\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nReferer: http://fdemo2.cronberg.dk/\nAccept-Encoding: gzip, deflate\nAccept-Language: en,da;q=0.9,en-US;q=0.8\n</code></pre>"},{"location":"introhttp.html#response","title":"Response","text":"<pre><code>HTTP/1.1 200 OK\nCache-Control: private\nContent-Length: 1498\nContent-Type: text/html; charset=utf-8\nServer: Microsoft-IIS/8.5\nX-AspNet-Version: 4.0.30319\nX-AspNetWebPages-Version: 3.0\nX-Powered-By: ASP.NET\nDate: Tue, 02 Oct 2018 22:09:33 GMT\n\n&lt;!DOCTYPE html&gt;\n...\n</code></pre> <p>Her er et eksempel p\u00e5 en simpel HTTP 1.1 POST foresp\u00f8rgsel</p>"},{"location":"introhttp.html#request_1","title":"Request","text":"<pre><code>POST http://fdemo2.cronberg.dk/SimplePost_submit.cshtml HTTP/1.1\nHost: fdemo2.cronberg.dk\nConnection: keep-alive\nContent-Length: 174\nCache-Control: max-age=0\nOrigin: http://fdemo2.cronberg.dk\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nReferer: http://fdemo2.cronberg.dk/SimplePost\nAccept-Encoding: gzip, deflate\nAccept-Language: en,da;q=0.9,en-US;q=0.8\n\ntxtName_name=1234&amp;txtSecretName_name=5678&amp;lstCountry_name=DK&amp;lstSpeak_name=SE&amp;chkFeelYoung_name=on&amp;optSex_name=Male&amp;file1_name=&amp;txtNotes_name=test&amp;btnSubmit1_name=Submit+%231\n</code></pre>"},{"location":"introhttp.html#reponse","title":"Reponse","text":"<pre><code>HTTP/1.1 200 OK\nCache-Control: private\nContent-Length: 1684\nContent-Type: text/html; charset=utf-8\nServer: Microsoft-IIS/8.5\nX-AspNet-Version: 4.0.30319\nX-AspNetWebPages-Version: 3.0\nX-Powered-By: ASP.NET\nDate: Tue, 02 Oct 2018 22:11:34 GMT\n\n&lt;!DOCTYPE html&gt;\n...\n</code></pre>"},{"location":"introhttp.html#status-koder","title":"Status koder","text":"<p>Der findes en del status koder som du som udvikler kan bruge til at finde status p\u00e5 kommunikationen:</p> <ul> <li>Informational 1XX</li> <li>Successful 2XX</li> <li>200 OK</li> <li>Redirection 3XX</li> <li>301/302</li> <li>Client Error 4XX</li> <li>Server Error 5X</li> <li>500 Server error</li> </ul>"},{"location":"introhttp.html#cookie","title":"Cookie","text":"<p>En Cookie er i virkeligheden bare et lille stykke tekst som inkluderes i headeren. Afh\u00e6ngig af typen vil browseren opbevare teksten og medtage denne til serveren ved alle efterf\u00f8lgende kald indtil den udl\u00f8ber.</p> <p>Her er et eksempel p\u00e5 en server som sender en cookie:</p> <pre><code>HTTP/1.1 200 OK\nCache-Control: private\nContent-Length: 1765\nContent-Type: text/html; charset=utf-8\nServer: Microsoft-IIS/8.5\nX-AspNet-Version: 4.0.30319\nX-AspNetWebPages-Version: 3.0\nSet-Cookie: MySessionCookie=My value; path=/\nSet-Cookie: MyExpireCookie=My value; expires=Tue, 16-Oct-2018 22:13:16 GMT; path=/\nX-Powered-By: ASP.NET\nDate: Tue, 02 Oct 2018 22:13:16 GMT\n\n&lt;!DOCTYPE html&gt;\n...\n</code></pre>"},{"location":"introhttp.html#kryptering","title":"Kryptering","text":"<p>HTTP er den rene tekstbaserede protokol. De fleste websites benytter en SSL krytering ved hj\u00e6lp af et certifikat og komunikere over en anden port end port 80. I s\u00e5 fald kaldes protokollen HTTPS.</p>"},{"location":"introhttp.html#http2","title":"HTTP/2","text":"<p>For ikke s\u00e5 mange \u00e5r siden blev HTTP 1.1 opdateret til HTTP 2 og alle browsere og servere har i dag mulighed for at kommunikere over HTTP2 hvis det \u00f8nskes. HTTP2 er en kraftig opdatering af den gamle version med en masse ny features:</p> <ul> <li>Multiplexing (flere transaktioner i en)</li> <li>Server push</li> <li>Bin\u00e6r</li> <li>Prioritisering af afsendelse af ressourcer</li> <li>Hastighed</li> </ul> <p>Se eventuelt HTTP2 test</p>"},{"location":"introhttp.html#uriurl","title":"URI/URL","text":"<p>Al kommunikation sker ved hj\u00e6lp af en tekst som identificere en ressource p\u00e5 nettet. Oprindelig specificerede Tim Berners-Lee URI (Uniform Resource Identifier) men URL (Uniform Resource Locator) og URN (Uniform Resource Name) er de konkrete specifikationer benyttet i HTTP.</p> <p>En URI best\u00e5r af </p> <pre><code>Protokol://subdom\u00e6ne(r).dom\u00e6ne/resource?Querystring (opdelt i n\u00f8gle og v\u00e6rdier adskilt med &amp;)\n</code></pre> <p>Her er et par eksempler:</p> <pre><code>http://www.google.com\nhttps://kursusportal.cronberg.dk/forside\nhttps://kursusportal.cronberg.dk/modul/1\nhttps://kursusportal.cronberg.dk/s\u00f8g?q=web\nhttps://kursusportal.cronberg.dk/viskursus?id=1&amp;bruger=michell\n</code></pre>"},{"location":"introhttp.html#vrktj","title":"V\u00e6rkt\u00f8j","text":"<p>Der findes en del v\u00e6rkt\u00f8jer relateret til test og brug af HTTP.</p>"},{"location":"introhttp.html#f12","title":"F12","text":"<p>Som udvikler kan du typisk n\u00f8jes med at benytte netv\u00e6rksfanen i browseren F12 tool - den giver alle de oplysninger der \u00f8nskes.</p>"},{"location":"introhttp.html#fiddler","title":"Fiddler","text":"<p>Men hvis du gerne vil have en dybere forst\u00e5else for HTTP og samtidigt gerne vil kunne skabe scripts der tester HTTP kommunikation kan Fiddler anbefales.</p>"},{"location":"introhttp.html#curl","title":"Curl","text":"<p>Slutteligt findes Curl som er et meget benyttet kommandolinje v\u00e6rkt\u00f8j til alle former for HTTP kommunikation.</p>"},{"location":"introhttp.html#prv-det-selv","title":"Pr\u00f8v det selv","text":"<p>Jeg har et par sider liggende p\u00e5 </p> <p>http://webdemo.cronberg.dk/</p> <p>hvis du vil lege lidt med HTTP/1.1.</p>"},{"location":"introjquery.html","title":"Introduktion til jQuery","text":"<p>jQuery er et af de mest popul\u00e6re biblioteker - udviklet af John Resig i 2006. Det bruges prim\u00e6rt til DOM manipulation men har ogs\u00e5 simple Ajax metoder mv.</p> <p>Elementer kan findes ved hj\u00e6lp af CSS selector syntaks gennem funktionen</p> <ul> <li>$</li> <li>jQuery</li> </ul> <p>som returnerer et array af DOM elementer, som efterf\u00f8lgende kan p\u00e5virkes. Array kan eventuelt p\u00e5virkes af et hav af filtre (:contains, :hidden, :button, :focus og mange flere).</p>"},{"location":"introjquery.html#eksempel","title":"Eksempel","text":"<p>Det ligger uden for dette modul at beskrive jQuery i dybden men her er et eksempel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 id=\"ov\"&gt;Test&lt;/h1&gt;\n&lt;button id=\"knap\"&gt;Klik p\u00e5 mig&lt;/button&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n// Find knap (knap) og n\u00e5r der klikkes p\u00e5 den\n// find element (ov) og g\u00f8r det r\u00f8dt\n$(\"#knap\").click(function () {\n$(\"#ov\").css(\"color\", \"red\");\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introjs.html","title":"Introduktion til JavaScript","text":"<p>JavaScript er det programmeringssprog der benyttes i alle moderne browsere, og er i dag den eneste mulighed for at skabe en dynamisk side. Der findes ogs\u00e5 WebAssembly (WASM) men det benyttes til at skabe komponenter som kan kaldes fra JavaScript.</p> <p>Sproget er det popul\u00e6re programmeringssprog (developer survey) fordi det er effektivt og \u201csimpelt\u201d. Samtidigt er det beh\u00e6ftet med forskellige fejl/uhensigtsm\u00e6ssigheder fra f\u00f8dsel - som dog er rettet i de senere versioner (s\u00e5 godt som det nu er muligt).</p> <p>Sproget benyttes i forskellige klienter og runtimes - mest kendt er NodeJS som benyttes Google\u2019s V8 motor til at kompilere og afvikle JavaScript p\u00e5 desktop/server.</p> <p>Oracle har varem\u00e6rket p\u00e5 JavaScript og er i princippet de eneste som m\u00e5 kalde sproget for JavaScript. Derfor findes der forskellige kreative navne p\u00e5 implementationer hos firmaer som blandt andet udvikler browsere - herunder</p> <ul> <li>Carakan (Opera)</li> <li>SpiderMonkey (Firefox)</li> <li>V8 (Google)</li> <li>JScript (Microsoft)</li> <li>og mange flere</li> </ul> <p>Sproget er skabt af Brendan Eich (Netscape) i 1995 inspireret af sprog</p> <ul> <li>C<ul> <li>syntaks</li> </ul> </li> <li>Scheme/Lisp<ul> <li>funktionsorienteret</li> </ul> </li> <li>Self/Smalltalk<ul> <li>objektorienteret</li> </ul> </li> </ul> <p>Sproget er typesvagt samt dynamisk og har features relateret til objektorienteret programmering (baseret p\u00e5 prototype) og funktionsorienteret programmering.</p>"},{"location":"introjs.html#ecma-script","title":"ECMA Script","text":"<p>Sproget er standardiseret af ECMA (tidligere European Computer Manufacturers Association - nu Ecma International) f\u00f8rste gang i 1997 (@cs DateTime.Now.Year - 1997 @ \u00e5r siden) - og kaldes derfor typisk ES (ECMAScript).</p> <p> </p> <p>Der er frigivet en del versioner gennem \u00e5rene:</p> <ul> <li>1997 ES v1</li> <li>1997 ES v2</li> <li>1999 ES v3</li> <li>2009 ES v5</li> <li>2015 ES v6</li> <li>2017 ES 2017</li> <li>2018 ES 2018</li> <li>2019 ES 2019</li> <li>2020 ES 2020</li> <li>2021 ES 2021</li> </ul> <p>De versioner man typisk h\u00f8rer mest om er ES3 (stor opdatering) og is\u00e6r ES6 (stor opdatering).</p> <p>Se evt ITHistorie</p>"},{"location":"introjs.html#platform","title":"Platform","text":"<p>Man kan v\u00e6lge at afvikle JavaScript filer direkte i browseren, men ved hj\u00e6lp af NodeJS kan JavaScript ogs\u00e5 benyttes p\u00e5 desktop eller server til blandt andet automatisering eller applikationsafvikling.</p>"},{"location":"introjs.html#introduktion-til-javascript_1","title":"Introduktion til JavaScript","text":"<p>Der er masser ressourcer p\u00e5 nettet relateret til programmering med JavaScript (ECMAScript), men her er et par ting som du b\u00f8r vide:</p> <ul> <li>Det kan (som det eneste scriptsprog) afvikles i alle browsere</li> <li>Det kan afvikles gennem Node.js</li> <li>Det har en C syntaks</li> <li>Det er typefrit</li> <li>Det er dynamisk</li> <li>Det er objektorienteret</li> </ul>"},{"location":"introjs.html#eksempler","title":"Eksempler","text":"<p>Her er et par korte eksempler med kommentarer:</p> <pre><code>// B\u00f8r altid v\u00e6re i toppen af scope i alt JavaScript\n\"use strict\";\n// Udskriv p\u00e5 consol (node eller browser)\nconsole.log(\"Test\");\n// erkl\u00e6ring og tildeling af variabler\nlet a = 1;\nlet b = \"Teknologisk\"; // eller 'Teknologisk'\n// beregninger\na++;\na = a + 10;\nconsole.log(\"a = \" + a);\n// betingelser\nif (a === 12) {\nconsole.log(\"a = 12\");\n}\nif (a === 12 &amp;&amp; b !== \"JS\") {\nconsole.log(\"a = 12 og b er forskellig fra 'JS'\");\n}\n// l\u00f8kke - t\u00e6ller 0 - 4\nfor (var i = 0; i &lt; 5; i++) {\nconsole.log(i);\n}\n// funktion\nfunction add(a, b) {\nreturn a + b;\n}\nlet resultat = add(10, 20);\nconsole.log(\"10 + 20 =\" + resultat);\n// Objekt\nlet c = {\nnavn: \"Mathias\",\nalder: 14,\n};\nconsole.log(c);\n// Klasse\nclass Person {\nconstructor(navn, alder) {\nthis.navn = navn;\nthis.alder = alder;\n}\nskriv() {\nconsole.log(`Jeg hedder ${this.navn} og er ${this.alder} gammel.`);\n}\n}\nlet p = new Person(\"Mikkel\", 17);\np.skriv();\n</code></pre>"},{"location":"introjs.html#prv-det-selv","title":"Pr\u00f8v det selv","text":"<ul> <li>Installer NodeJs i seneste version, og s\u00f8rg for at installationen tilf\u00f8je node.exe til Path-variablen.</li> <li>Installer Visual Studio Code samt extensions<ul> <li>Live Server</li> <li>Prettier</li> </ul> </li> <li>Opret en tom mappe og i en terminal naviger til mappen og skriv</li> </ul> <pre><code>npm init -f\n</code></pre> <ul> <li>Dette opretter en package.json</li> <li>Start VS code med</li> </ul> <pre><code>code .\n</code></pre> <ul> <li>Opret en tom js fil (app.js) og tilf\u00f8j lidt kode</li> </ul> <pre><code>console.log(\"Hello word\");\n</code></pre> <ul> <li>Tryk F5 i VSC og v\u00e6lg Node som afvikler</li> <li>Du kan ogs\u00e5 fra terminal skrive</li> </ul> <pre><code>node app.js\n</code></pre> <p>Her er en kort video som viser hvordan du kommer i gang med at afvikle JavaScript i browseren og via Node.</p> <p>Se evt. dette repo for forskellige eksempler.</p>"},{"location":"introjs.html#moduler","title":"Moduler","text":"<p>I det oprindelige ECMA Script kan man udelukkende indkapsle data og funktionalitet i funktioner, og det kan g\u00f8re en st\u00f8rre kodebase meget kompleks at udvikle. Derfor har man s\u00f8gt efter muligheder for at modulalisere ES, og flere m\u00f8nstre/formater/standarder er blevet skabt.</p> <ul> <li>Closure og funktioner i \u201cren\u201d ES</li> <li>CommonJS</li> <li>AMD (Asynchronous Module Definition)</li> <li>UMD (Universal Module Definition)</li> </ul> <p>De sidste tre kr\u00e6ver en transpiler som WebPack, Browserify eller Parcel for at virke i en browser, og Node har valgt at benytte CommonJS som standard.</p>"},{"location":"introjs.html#es6-moduler","title":"ES6 moduler","text":"<p>Inden for de sidste par \u00e5r er ES6 moduler blevet en mulighed i alle browsere og Node s\u00e5 det er sikkert den vej moduler i fremtiden vil blive udviklet.</p> <p>I ES6 er en .js fil et modul der som helt af sig selv er en container hvor alt er privat, og hvis man \u00f8nsker at andre skal have adgang til data og funktionalitet skal det eksporteres.</p>"},{"location":"introjs.html#ajax","title":"AJAX","text":"<p>AJAX er et akronym for Async JavaScript And XML og d\u00e6kker over muligheden for at benytte det i alle browsere indbyggede XML HTTP Request Object til HTTP kommunikation. Objektet er tilg\u00e6ngeligt direkte men de fleste benytter et bibliotek som jQuery (som har AJAX metoder) eller Axios.</p>"},{"location":"introjs.html#eksempel-med-axios","title":"Eksempel med Axios","text":"<p>Her er et eksempel med brug af Axios i en browser:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Kommuner&lt;/title&gt;\n&lt;h1&gt;Alle kommuner i Danmark&lt;/h1&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;ul id=\"kommuner\"&gt;&lt;/ul&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nhentData();\nasync function hentData() {\nconst response = await axios.get(\n\"https://dawa.aws.dk/kommuner/\"\n);\nconst ol = document.getElementById(\"kommuner\");\nfor (var i = 0; i &lt; response.data.length; i++) {\nconst li = document.createElement(\"li\");\nli.innerHTML = response.data[i].navn;\nol.appendChild(li);\n}\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Bem\u00e6rk, at biblioteket hentes f\u00f8rst i jsdelivr (men det findes mange steder - eller kan hentes lokalt).</p> <p>Her er samme funktion afviklet via node, men det kr\u00e6ver at Axios er hentet med</p> <pre><code>npm i axios --save\n</code></pre> <p>Herefter kan f\u00f8lgende hente kommuner og udskrive p\u00e5 konsol:</p> <pre><code>const axios = require(\"axios\").default;\nhentData();\nasync function hentData() {\nconst response = await axios.get(\"https://dawa.aws.dk/kommuner/\");\nfor (var i = 0; i &lt; response.data.length; i++) {\nconsole.log(response.data[i].navn);\n}\n}\n</code></pre>"},{"location":"introjs.html#polyfill","title":"Polyfill","text":"<p>Man skal v\u00e6re lidt opm\u00e6rksom p\u00e5 hvilke version af EcmaScript man benytter fordi der vil opst\u00e5 fejl i \u00e6ldre browsere hvis den p\u00e5g\u00e6ldende version ikke underst\u00f8ttes. Se eksempelvis classList og String.ReplaceAll.</p> <p>Problemet kan l\u00f8ses med et polyfill som eksempelvis classList eller f\u00f8lgende kode til ReplaceAll:</p> <pre><code>if (!String.prototype.replaceAll) {\nString.prototype.replaceAll = function (str, newStr) {\n// If a regex pattern\nif (\nObject.prototype.toString.call(str).toLowerCase() ===\n\"[object regexp]\"\n) {\nreturn this.replace(str, newStr);\n}\n// If a string\nreturn this.replace(new RegExp(str, \"g\"), newStr);\n};\n}\n</code></pre> <p>Der findes en del biblioteker som kan hj\u00e6lpe - eksempelvis https://polyfill.io/v3/</p>"},{"location":"introjs.html#lintere","title":"Lintere","text":"<p>En af de st\u00f8rste udfordringer ved udvikling af JavaScript er at sproget er typefrit og dynamisk. Det kan give en masse mulighed i udvikling af logik, men det betyder ogs\u00e5 at udviklingsmilj\u00f8er har sv\u00e6rt ved at tilbyde hj\u00e6lp. Yderligere er der en masse \u201cbest practice\u201d i JavaScript som kan v\u00e6re sv\u00e6r at overholde - selv for erfarne udviklere.</p> <p>Derfor findes der flere produktioner - kaldet lintere - til JavaScript, som har til form\u00e5l at finde fejl og komme med advarsler ud fra et givet s\u00e6t af regler.</p>"},{"location":"introjs.html#eslint","title":"ESLint","text":"<p>En af de mere popul\u00e6re er ESLint som kan tilrettes p\u00e5 alle mulige m\u00e5der. Eksempelvis kan JavaScript kode som</p> <pre><code>let a = b;\n</code></pre> <p>v\u00e6re et problem fordi b ikke er erkl\u00e6ret inden brug, og a i \u00f8vrigt ikke er benyttet. Begge dele er vigtig information men ikke i sig selv en fejl i JavaScript.</p> <p>Derfor vil du til finde ESLint, JSLint eller andre lignende linter v\u00e6re en del af et JavaScript projekt.</p>"},{"location":"introjs.html#transpilere","title":"Transpilere","text":"<p>JavaScript kan v\u00e6re en udfordring grundet b\u00e5de designfejl, manglende typesikkerhed samt krav om kompatibilitet med \u00e6ldre versioner af runtime i browsere. Derfor har der v\u00e6ret tradition for, at kode blev skrevet i andre sprog (eksempelvis Java eller Python) og s\u00e5 transpileret til JavaScript.</p>"},{"location":"introjs.html#typescript-ts","title":"TypeScript (TS)","text":"<p>De senere \u00e5r er der dog dukket andre typer af transpilere op som man typisk ser i et st\u00f8rre JavaScript projekt. Microsofts TypeScript er en af de popul\u00e6re transpilere. Den tilf\u00f8jer b\u00e5de typer, nye features til sproget, retter gamle fejl og transpilere ny og moderne JavaScript til \u00e6ldre versioner.</p> <p>TypeScript er et supers\u00e6t af JavaScript forst\u00e5et s\u00e5ledes, at en JS fil helt automatisk er en TS fil men der kan tilf\u00f8jes features til TS som s\u00e5 transileres til JS.</p> <p>Eksempelvis er f\u00f8lgende kode TS og ikke JS:</p> <pre><code>function l\u00e6gSammen(a: number, b: number): number {\nreturn a + b;\n}\nlet a: number = l\u00e6gSammen(1, 1);\n</code></pre> <p>L\u00e6g m\u00e6rke til definitionen af typer som JS ikke forst\u00e5r, men som giver en masse fordele i forbindelse med udvikling af kode. TS koden bliver transpileret til JS som f\u00f8lger:</p> <pre><code>function l\u00e6gSammen(a, b) {\nreturn a + b;\n}\nlet a = l\u00e6gSammen(1, 1);\n</code></pre> <p>Nu er typedefinitionen v\u00e6k og koden kan forst\u00e5s af JS runtimes.</p> <p>Et andet eksempel er f\u00f8lgende:</p> <pre><code>namespace Cronberg {\nclass Person {}\nclass Elev extends Person {}\n}\n</code></pre> <p>hvilket er logisk objektorienteret kode, men hvis det skal virke i \u00e6ldre browsere som benytter ES5 blivr det transpileret til</p> <pre><code>var __extends =\n(this &amp;&amp; this.__extends) ||\n(function () {\nvar extendStatics = function (d, b) {\nextendStatics =\nObject.setPrototypeOf ||\n({ __proto__: [] } instanceof Array &amp;&amp;\nfunction (d, b) {\nd.__proto__ = b;\n}) ||\nfunction (d, b) {\nfor (var p in b)\nif (Object.prototype.hasOwnProperty.call(b, p))\nd[p] = b[p];\n};\nreturn extendStatics(d, b);\n};\nreturn function (d, b) {\nextendStatics(d, b);\nfunction __() {\nthis.constructor = d;\n}\nd.prototype =\nb === null\n? Object.create(b)\n: ((__.prototype = b.prototype), new __());\n};\n})();\nvar Cronberg;\n(function (Cronberg) {\nvar Person = /** @class */ (function () {\nfunction Person() {}\nreturn Person;\n})();\nvar Elev = /** @class */ (function (_super) {\n__extends(Elev, _super);\nfunction Elev() {\nreturn (_super !== null &amp;&amp; _super.apply(this, arguments)) || this;\n}\nreturn Elev;\n})(Person);\n})(Cronberg || (Cronberg = {}));\n</code></pre>"},{"location":"introjs.html#babel","title":"Babel","text":"<p>En anden popul\u00e6r transpiler er Babel som har lignende funktionalitet men som ikke er typest\u00e6rk men derimod st\u00e6rk i transpilering af helt nye features i JS til \u00e6ldre versioner.</p>"},{"location":"intronodejs.html","title":"Introduktion til NodeJS","text":"<p>JavaScript runtime bygget p\u00e5 Googles V8 motor, der giver mulighed for at afvikle JavaScript filer p\u00e5 b\u00e5de server og desktop - p\u00e5 de fleste platforme.</p> <p>NodeJS er skabt af Ryan Dahl i 2009. Se ithistorie.cronberg.dk for at f\u00e5 et overblik.</p> <p>Download Node fra https://nodejs.org/ til alle platforme.</p>"},{"location":"intronodejs.html#eventloop","title":"EventLoop","text":"<p>Node benytter et indbygget eventloop der asynkront kalder eksterne ressourcer (IO, DB, HTTP mv)</p> <p></p> <p>ref</p> <p>Node (og JS) er enkelttr\u00e5det men afvikler IO/HTTP mv asynkront ved at lade operativsystemet foretage kald.</p>"},{"location":"intronodejs.html#indbyggede-apier","title":"Indbyggede APIer","text":"<p>Node har et hav af indbyggede APier som giver mulighed for at benytte</p> <ul> <li>console</li> <li>kryptering</li> <li>http, dns, tcp mv</li> <li>moduler</li> <li>fil systemet</li> <li>operativsystemet</li> <li>streams</li> <li>timers</li> </ul> <p>og meget mere.</p>"},{"location":"intronodejs.html#brug-af-node","title":"Brug af node","text":"<p>Flere store virksomheder benytter node til at skabe serverside webapplikationer med voldsomt mange brugere</p> <ul> <li>Paypal</li> <li>Netflix</li> <li>Uber</li> <li>LinkedIn</li> <li>mv</li> </ul> <p>og mange benytter node scripts som en del af udviklingsprocessen til alle typer af applikationer</p> <ul> <li>kompilering/transpilering</li> <li>linting</li> <li>minificering</li> <li>tranformering af billeder</li> <li>kopi/backup</li> <li>deployment</li> <li>kryptering</li> <li>komprimering</li> <li>mv</li> </ul> <p>Argumenterne for at benytte Node er mange</p> <ul> <li>Javascript</li> <li>Hastighed</li> <li>Async / non blocking</li> <li>Mange muligheder for at skabe apps (serverside/clientside)</li> <li>NPM med et hav af pakker (+50.000)</li> <li>Meget udbredt</li> </ul>"},{"location":"intronodejs.html#npm","title":"NPM","text":"<p>Der findes et hav af 3. parts pakker som kan kombineres p\u00e5 alle m\u00e5de</p> <p>https://www.npmjs.com/</p> <p>Pakker som</p> <ul> <li>Express (k\u00e6mpe framework til at skabe serverside web apps)</li> <li>Async (hj\u00e6lp til async kode)</li> <li>Request (hj\u00e6lp til http)</li> <li>Browserify / WebPack (hj\u00e6lp til modul baseret udvikling og meget mere)</li> <li>Grunt (task runner)</li> <li>Socket.io (socket kommunikation)</li> <li>Commander (console)</li> <li>Mocha (test)</li> <li>UnderscoreJS (arrays mv)</li> <li>Passport (authentication)</li> <li>NodeMailer (mail)</li> <li>React / Angular / Vue (SPA apps)</li> <li>Karma (test)</li> <li>MySql/Mongo (DB)</li> <li>LESS (kompilering CSS)</li> <li>JSHint/TSHint (linter)</li> </ul> <p>NPM er en del af NodeJS installationen.</p>"},{"location":"intronodejs.html#en-node-applikation","title":"En Node-applikation","text":"<p>Best\u00e5r typisk af en mappe med f\u00f8lgende filer</p> <ul> <li>package.json</li> <li>fil med info om applikationen, source control, hvilke pakker der benyttes samt eventuelle scripts</li> <li>.gitignore (eller anden source control ignore file)</li> <li>de filer som ignoreres af source control</li> <li>jslint.json eller tslint.json</li> <li>konfiguration af lintere</li> <li>jsconfig.json, tsconfig.json eller lign.</li> <li>ops\u00e6tning til kompiler/transpiler</li> </ul>"},{"location":"intronodejs.html#start-en-node-applikation-uden-git","title":"Start en node-applikation (uden git)","text":"<p>I en tom mappe (typisk med navngivet efter applikationen</p> <pre><code>npm init \n</code></pre> <p>og besvar diverse sp\u00f8rgsm\u00e5l.</p>"},{"location":"intronodejs.html#eksempel-pa-en-simpel-node-applikation","title":"Eksempel p\u00e5 en simpel node-applikation","text":"<p>Hent</p> <p>devcronberg/nodedemo</p> <p>og l\u00e6s readme</p>"},{"location":"introprogrammering.html","title":"Introduktion til programmering","text":"<p>Form\u00e5let med programmering er, at skabe en samling instruktioner for at automatisere en process p\u00e5 en computer (typisk afviklet i et standardiseret operativsystem).</p>"},{"location":"introprogrammering.html#den-korte-historie","title":"Den korte historie","text":"<ul> <li>Har r\u00f8dder helt tilbage til Charles Babbage\u2019s mekaniske computer kaldet Analytical Engine fra omkring 1837 (183 \u00e5r siden). Her skrev Ada Lovelace i 1843 det f\u00f8rste (teoretiske) computerprogram</li> </ul> <ul> <li>Herman Hollerith skabte omkring 1885 (135 \u00e5r siden) sin programmerbare \u201cElectromechanical punched card tabulator\u201d som blev brugt til folkeopt\u00e6lling. Hans firma blev senere (1925) omd\u00f8bt til IBM.</li> </ul> <ul> <li>Under 2. verdenskrig dukkede de f\u00f8rste elektroniske computere op </li> <li>Tyskernes Z3-computer baseret p\u00e5 rel\u00e6er</li> <li>Engl\u00e6ndernes Bombe brugt til at bryde tyskernes Enigma kodemaskine. Skabt blandt andet af Alan Turing, som har haft k\u00e6mpe indflydelse p\u00e5 computer teknologi<ul> <li>Udgav en del afhandling, og beskrev blandt andet Turing Machine hvis teorier satte IT teknologien igang</li> <li>Se filmen The Imitation Game</li> </ul> </li> </ul> <ul> <li>1952 blev den f\u00f8rste (britiske) kommercielle computer udviklet - Ferranti Mark I</li> <li>I 1960\u2019erne udviklere MIT og NASA operativsystemerne bag Apollo-missionerne</li> <li>Ikonisk billede af Margaret Hammilton med source koden til Apollo skevet i Assembler</li> </ul>"},{"location":"introprogrammering.html#begreber-inden-for-softwareudvikling","title":"Begreber inden for softwareudvikling","text":"<ul> <li>Instruktioner til CPU skrives i kildekode/source code</li> <li>Der findes et hav af forskellige programmeringssprog</li> <li>Kildekode kompileres herefter til en for processoren forst\u00e5elige instruktioner</li> <li>Det er som alt muligt andet et h\u00e5ndv\u00e6rk at \u201cskrive kode\u201d<ul> <li>Programmeringsparadigmer</li> <li>Iterativ</li> <li>Procedural</li> <li>Objektorientert</li> <li>Funktionsorienteret</li> <li>Opm\u00e6rkningsbaseret</li> <li>Visuelt</li> <li>IT Arkitektur</li> </ul> </li> <li>Programmering handler typisk om at styre programpointeren til at afvikle instruktioner, og alle moderne programmeringssprog indeholder typisk (i en eller anden form)</li> <li>Variabler</li> <li>Flow instruktioner<ul> <li>L\u00f8kker</li> <li>Betingelser</li> </ul> </li> <li>Metoder/Funktioner</li> <li>Der kan opst\u00e5 fejl i koden - ogs\u00e5 kaldet bugs</li> <li>Ikonisk billede af \u201cen bug\u201d fra en rel\u00e6 computer (MARK II) i 1946. Bug fundet af [Grace Hopper] - en af pionerne bag programmeringssprog (herunder COBOL)</li> </ul> <ul> <li>Fejlfinding / debugging er derfor en stor del af software udvikling.</li> <li>Applikationer testes p\u00e5 forskellig vis</li> <li>Unit test</li> <li>UI test</li> <li>Integration test</li> </ul>"},{"location":"introprogrammering.html#prv-det-selv","title":"Pr\u00f8v det selv","text":"<p>Software udvikling kan godt - i begr\u00e6nset form - ske visuelt.</p> <p>Pr\u00f8v selv p\u00e5 Hour of Code - eksempelvis blockly.games. </p> <p></p> <p>Alternativ AppInventor - Android (og iOS), eller MicroBit.</p>"},{"location":"introprogrammering.html#talsystemer","title":"Talsystemer","text":"<p>Den klassiske computer er baseret p\u00e5 det bin\u00e6re talsystem</p> <ul> <li>til/fra</li> <li>sp\u00e6nding/ikke sp\u00e6nding</li> </ul> <p>Baseret p\u00e5 to v\u00e6rdier (typisk 0 og 1) kan man repr\u00e6sentere alle tal (hvis man har plads nok)</p>"},{"location":"introprogrammering.html#den-lille-tabel","title":"Den lille tabel","text":""},{"location":"introprogrammering.html#lr-det-binre-talsystem-pa","title":"L\u00e6r det bin\u00e6re talsystem p\u00e5","text":"<ul> <li>csdemo om nummersystemer</li> <li>Quiz hos csdemo om konvertering til bin\u00e6re tal</li> </ul>"},{"location":"introprogrammering.html#betegnelser","title":"Betegnelser","text":"<ul> <li>1 = bit</li> <li>4 = nibble</li> <li>8 = byte</li> <li>8/16/32/64 = word</li> </ul>"},{"location":"introprogrammering.html#forkortelser","title":"Forkortelser","text":""},{"location":"introprogrammering.html#bit","title":"Bit","text":"<ul> <li>1 Kb = 1.024 bit (128 bytes)</li> <li>1 Mb = 1.048.576 bit </li> <li>1 Gb = 1.073.741.824 bit </li> <li>1 Tb = 1.099.511.627.776 bit </li> </ul>"},{"location":"introprogrammering.html#bytes","title":"Bytes","text":"<ul> <li>1 KB = 1.024 bytes</li> <li>1 MB = 1.048.576 bytes</li> <li>1 GB = 1.073.741.824 bit </li> <li>1 TB = 1.099.511.627.776 bit </li> </ul>"},{"location":"introprogrammering.html#binr-aritmetik","title":"Bin\u00e6r aritmetik","text":"<p>Man kan foretage alle former for beregninger i det bin\u00e6re talsystem ligesom i det decimale talsystem - eksempelvis addition</p> <p></p> <p></p> <p>Se eksempler p\u00e5 forskellige typer af beregninger hos WikiPedia.</p>"},{"location":"introprogrammering.html#det-hexadecimale-talsystem","title":"Det hexadecimale talsystem","text":"<p>I IT teknologier vil du ogs\u00e5 m\u00f8de det hexadecimale talsystem som t\u00e6ller 0-15</p> <p></p>"},{"location":"introprogrammering.html#lr-det-hexadecimale-talsystem-pa","title":"L\u00e6r det hexadecimale talsystem p\u00e5","text":"<ul> <li>csdemo om nummersystemer</li> <li>Quiz hos csdemo om konvertering til hexadecimale tal</li> </ul>"},{"location":"introprogrammering.html#typer-af-tal","title":"Typer af tal","text":"<p>Generelt findes der heltal (signed (-+) og unsigned (+)) og kommatal.</p>"},{"location":"introprogrammering.html#heltal","title":"Heltal","text":"Type Bites Sp\u00e6nd Lille positivt heltal 8 0 til 255 Stort positivt heltal 16 0 til 65.536 Meget stort positivt heltal 64 0 til 18.446.744.073.709.551.616 Stort positivt og negativt heltal 32 -2.147.483.648 til +2.147.483.647"},{"location":"introprogrammering.html#kommatal","title":"Kommatal","text":"<p>Der er flere m\u00e5der at beskrive et kommatal p\u00e5. De fleste CPU\u2019er har indbygget floating point repr\u00e6sentation, som er en m\u00e5de at beskrive et kommatal. Det er super hurtigt men ikke helt pr\u00e6cist p\u00e5 de yderste decimaler. Konvertering til floating point kan v\u00e6re ret kompleks men denne artikel forklarer det ret godt. </p> <p>De fleste programmeringssprog tilbyder ogs\u00e5 andre muligheder for repr\u00e6sentation af kommatal.</p>"},{"location":"introprogrammering.html#udfordringer","title":"Udfordringer","text":"<p>Hvis der v\u00e6lges forkerte typer af heltal og kommatal kan det skabe fejl som kan v\u00e6re sv\u00e6re at finde. Se eksempelvis Engineering Disasters 13 - Software Flaws p\u00e5 YouTube. Her beskrives eksempelvis software fejl i amerikanernes Patriot missiler under Golfkrigen i starten af 90\u2019erne.</p>"},{"location":"introprogrammering.html#kontakter","title":"Kontakter","text":"<p>Alle processorer er skabt af \u201ckontakter\u201d.</p> <p>Her en simpel kontakt som skal v\u00e6re \u201ctil\u201d for at aktivere en magnet.</p> <p></p> <p>Her et kredsl\u00f8b med to kontakter hvor begge input skal v\u00e6re \u201ctil\u201d for at lampen lyser.</p> <p></p> <p></p> <p>Og her et kredsl\u00f8b med to kontakter hvor blot en af kontakterne skal v\u00e6re \u201ctil\u201d for at lampen lyser.</p> <p></p> <p></p> <p>(Alle tegninger er fra den forrygende bog Code: The Hidden Language of Computer Hardware and Software af Charles Petzold som i den grad kan anbefales hvis du vil vide mere om hvordan en computer/cpu fungerer.)</p>"},{"location":"introprogrammering.html#rel","title":"Rel\u00e6","text":"<p>Bell Laboratories relay computer for U.S. Army (1946)</p> <p> </p>"},{"location":"introprogrammering.html#vakuumrr","title":"Vakuumr\u00f8r","text":"<p>Forskellige typer af vakuumr\u00f8r</p> <p> </p>"},{"location":"introprogrammering.html#transistor","title":"Transistor","text":"<p>I 1950\u2019erne blev \u201ckontakterne\u201d digitale. Se denne gode dokumentar om opfindelsen af transitoreren</p> <p> </p>"},{"location":"introprogrammering.html#logiske-kredslb","title":"Logiske kredsl\u00f8b","text":"<p>Logiske kredsl\u00f8b er grundlaget for alt computer teknologi, og g\u00f8r det muligt at regne og huske.</p> <ul> <li>NOT</li> <li>AND</li> <li>OR</li> <li>XOR</li> <li>NAND</li> <li>NOR</li> <li>XNOR</li> </ul>"},{"location":"introprogrammering.html#sandhedstabeller","title":"Sandhedstabeller","text":"<p>Check https://csdemo.cronberg.dk/gates.html s\u00e5 du kan se hvordan de fungerer.</p>"},{"location":"introprogrammering.html#gates-af-elektronik","title":"Gates af elektronik","text":"<p>Alle gates er i virkeligheden ret simple rent elektronisk. En OR gates eksempelvis kan skabes af to transistorer.</p> <p></p>"},{"location":"introprogrammering.html#moores-lov","title":"Moores lov","text":"<p>Gordon E. Moore (Intel) forudsagde i 1970, at antallet af transistorer i processorer ville blive fordoble cirka hvert andet \u00e5r. P\u00e5 det tidspunkt kunne man proppe omkring et par tusinde transistorer i en chip. Hans forudsigelser har holdt nogenlunde stik i halvtreds \u00e5r, men nu begynder det at knibe. Komponenterne bliver s\u00e5 sm\u00e5 at man har sv\u00e6rt ved at holde styr p\u00e5 elektronerne.</p> <p></p> <p>Dog er der nye sp\u00e6ndende materialer p\u00e5 vej som b\u00e5de vil \u00f8je antallet af transistorer igen, og samtidigt g\u00f8re kredsl\u00f8b mere stabile og mindre varme. Is\u00e6r Grafen/Graphene er meget omtalt pt. Det er en form for carbon med kun et lag atomer, og er ufatteligt st\u00e6rk. De f\u00f8rste batterier er begyndt at dukke op i 2020 (https://www.youtube.com/watch?v=dnE1nO6o-do).</p>"},{"location":"introprogrammering.html#lidt-historie","title":"Lidt historie","text":"<p>Check lige George Boole (1815-1864) - ham alle IT udviklere b\u00f8r kende til.    - Far til boolsk algebra      - Logiske beregninger/formler med klasser/set af elementer (ikke tal) og operatorer som eksempelvis + (or), x (and) og 1 (not)</p> <p>Og check Claude Shannon (1916-2001), som videre udviklede George Boole\u2019s tanker til elektroniske kredsl\u00f8b omkring 1937.</p> <p>Og medens du er igang - John Bardeen (1908-1991), William Bradford Shockley (1910-1989) and Walter Houser Brattain (1902-1987) - som fik Nobel prisen i Fysik i 1956 for deres arbejde indenfor halvledere og transitorer.</p> <p>Og sluttelig Jack Kilby (1923-2005) som opfandt IC kredse i 1950\u2019erne (Nobel prisen i fysik i 2000). - George Boole - Claude Shannon</p>"},{"location":"introprogrammering.html#beregning-med-logiske-kredslb","title":"Beregning med logiske kredsl\u00f8b","text":"<p>N\u00e5r f\u00f8rst man har adgang til forskellige logiske kredsl\u00f8b kan man foretage alle typer af beregninger - startende med at l\u00e6gge to bit sammen uden mente</p> <p>https://csdemo.cronberg.dk/halfadder.html</p> <p>og to bit sammen med mente</p> <p>https://csdemo.cronberg.dk/fulladder.html</p> <p>Og hvis man kan l\u00e6gge to bit sammen kan man l\u00e6gge tre bit sammen, og fire bit sammen, og \u2026</p>"},{"location":"introprogrammering.html#alu-arithmetic-logic-unit","title":"ALU (Arithmetic logic unit)","text":"<p>Er komponenten i en processor som typisk foretager beregninger, logiske operationer og sammenligninger</p> <p>Her en SN74A181N.</p> <p></p> <p>Her er datasheet for kredsen, og her skemaet for samme - bem\u00e6rk de mange gates.</p> <p></p>"},{"location":"introprogrammering.html#hukommelse","title":"Hukommelse","text":"<p>Kombinationen af logiske kredsl\u00f8b (og typisk en clock) kan skabe hukommelse - der er mange forskellige typer.</p> <p>Kredsl\u00f8b bruges til sm\u00e5 registre, RAM og ROM mv</p>"},{"location":"introprogrammering.html#or-latch","title":"OR Latch","text":""},{"location":"introprogrammering.html#set-reset-and-or-latch","title":"Set Reset AND-OR latch","text":"<p>En af de mere simple Set Reset latch er SR AND-OR latch\u2019en</p> <p></p> <p>Den kan du lege med p\u00e5 CS Demo</p>"},{"location":"introprogrammering.html#ram-intro","title":"RAM intro","text":"<p>RAM er opbygget s\u00e5ledes, at en konkret adresse indeholder en v\u00e6rdi - s\u00e5 en 8 bit RAM kunne se s\u00e5ledes ud.</p> <p></p> <p>N\u00e5r man benytter variabler i programmer er navnene p\u00e5 variablerne i virkeligheden blot en reference til en adresse i hukommelsen.</p> <p>Pr\u00f8v selv p\u00e5 https://csdemo.cronberg.dk/ram.html.</p>"},{"location":"introprogrammering.html#hjertet-i-en-cpu-clock","title":"Hjertet i en CPU (clock)","text":"<p>En CPU har en eller flere clock-kredsl\u00f8b som s\u00f8rger for at styre og time afvikling af operationer.</p> <p>I sin helt simple form bruges en timer-chip eller en krystal.</p>"},{"location":"introprogrammering.html#hertz","title":"Hertz","text":"<p>Hertz m\u00e5ler frekens - 1 Hz = 1 slag i sekundet</p> Forkortelse Beskrivelse hertz Hz hertz 1 kHz kilohertz 1.000 mHz megahertz 1.000.000 gHz gigahertz 1.000.000.000 ## En SAP (simple as possible) CPU <p>Skabt af Albert Paul Malvino i bogen Digital computer electronics</p> <p></p> <p>Ref</p> <ul> <li>Ben Eater\u2019s 8 bit computer</li> </ul>"},{"location":"introprogrammering.html#michells-sap1-simulering","title":"Michells SAP1 simulering","text":"<p>Du kan finde en simulering af SAP1 p\u00e5 devcronberg/sap-cpu</p> <p></p> <p>Det som er allervigtigst at forst\u00e5, er hvordan registrer og ALU kan p\u00e5virkes via kontrollinjer, og at disse kan p\u00e5virkes b\u00e5de manuelt samt gennem bin\u00e6re v\u00e6rdier.</p>"},{"location":"introprogrammering.html#opkoder-og-maskinkode","title":"opkoder og maskinkode","text":"<p>P\u00e5 sitet findes andre versioner af CPU\u2019en s\u00e5 det er nemmere at forst\u00e5</p> <ul> <li>Registre</li> <li>ALU</li> <li>RAM</li> <li>Kontrollinjer</li> <li>Mikroinstruktioner</li> <li>Opkoder</li> </ul> <p>Den sidste version af computeren introducerer Assembler som en direkte overs\u00e6ttelse af opkoder til assembler.</p>"},{"location":"introprogrammering.html#altair","title":"Altair","text":"<p>Ref</p> <ul> <li>Altair 8800</li> <li>Altair 8800 simulator</li> <li>Instruktion</li> </ul>"},{"location":"introprogrammering.html#lg-2-to-tal-sammen-fra-ram","title":"L\u00e6g 2 to tal sammen fra RAM","text":"nr kommando v\u00e6rdi kommentar 00000000 LDA 00111010 Load til A fra 128 00000001 - 10000000 00000010 - 00000000 00000011 MOV 01000111 Flyt A -&gt; B 00000100 LDA 00111010 Load til A fra 129 00000101 - 10000001 00000110 - 00000000 00000111 ADD 10000000 L\u00e6g A og B sammen 00001000 STA 00110010 Flyt A til 130 00001001 - 10000010 00001010 - 00000000 00001011 JMP 11000011 Jump til 0 00001100 - 00000000 00001101 - 00000000"},{"location":"introprogrammering.html#digirule2","title":"Digirule2","text":"<p>Oprindeligt fra KickStarter - nu direkte hos Bradley Slattery</p> <p> </p>"},{"location":"introprogrammering.html#lg-2-to-tal-sammen-fra-ram_1","title":"L\u00e6g 2 to tal sammen fra RAM","text":"nr kommando v\u00e6rdi kommentar 00000000 COPYLR 00000011 copy 2 til ram pos 20 00000001 2 00000010 00000010 20 00010100 00000011 COPYLR 00000011 copy 2 til ram pos 21 00000100 2 00000010 00000101 21 00010101 00000110 COPYRA 00000110 copy ram pos 20 til a 00000111 20 00010100 00001000 ADDRA 00001001 add ram pos 21 til a 00001001 21 00010101 00001010 COPYAR 00000101 copy a til 255 (out) 00001011 255 11111111 00001100 jump 00011100 uendeligt loop 00001101 12 00001100"},{"location":"introprogrammering.html#moderne-processorer","title":"Moderne processorer","text":"<ul> <li>X86/X64 arkitektur</li> <li>X86 instruktioner</li> <li>ARM arkitektur</li> </ul>"},{"location":"introprogrammering.html#kompilere-og-programmeringssprog","title":"Kompilere og programmeringssprog","text":"<p>CPU niveau   - Maskinkode</p> <p>Lavniveau   - Maskinsprog Assembler</p> <p>H\u00f8jniveau</p> <ul> <li>COBOL</li> <li>C-sprog</li> <li> <p>.NET / JAVA</p> </li> <li> <p>H\u00f8j niveau sprog er typisk abstraktion p\u00e5 abstraktion p\u00e5 abstraktion</p> </li> <li> <p>Sprog der kompilere til et andet sprog der kompileres til et tredje sprog </p> </li> <li> <p>Kompilering til eksekvebar kode kaldes \u201ckompilering\u201d (compile) eller \u201cbyggesekvens\u201d (build)</p> </li> <li>Kompilering til andre sprog kaldes \u201ctranspilering\u201d</li> </ul> <p>Pr\u00f8v det selv p\u00e5 https://csdemo.cronberg.dk/compile.html.</p>"},{"location":"introprogrammering.html#programmeringssprog","title":"Programmeringssprog","text":"<ul> <li>1940: Assembly</li> <li>1950-60: COBOL, FORTRAN, Basic</li> <li>1970: Logo, Pascal, C, Smalltalk</li> <li>1980: C++, Eiffel, Perl, </li> <li>1990: Python, Java, Delphi, JavaScript, Ruby</li> <li>2000: C#, F#, Ruby on Rails </li> <li>2010: Dart</li> <li>2012: TypeScript</li> </ul> <p>De mest popul\u00e6re programmeringssprog - se StackOvewflow</p> <p>En del danskere har bidraget med programmeringssprog    - c++ (Bjarne Stroustrup)   - c#, delphi, pascal (Anders Hejlsberg)   - php (Rasmus Lerdorf)   - dart (Lars Bak og Kasper Lund)</p>"},{"location":"introprogrammering.html#syntaks-og-instruktioner","title":"Syntaks og instruktioner","text":"<ul> <li>De fleste sprog er forskellige i syntaks</li> <li>Alle best\u00e5r af instruktioner af en eller anden art</li> <li>Kildekode</li> <li>Opm\u00e6rkninger</li> <li>Grafisk</li> <li>Instruktioner er defineret p\u00e5 flere m\u00e5der</li> <li>Linjeskift</li> <li>Semikolon</li> <li>Tabulering</li> <li>Programpointer</li> <li>Flow i koden</li> <li>Instruktion til instruktion</li> <li>Linje til linje</li> <li>Funktion til funktion</li> </ul>"},{"location":"introprogrammering.html#eksempler-pa-syntaks","title":"Eksempler p\u00e5 syntaks","text":""},{"location":"introprogrammering.html#maskinkode","title":"Maskinkode","text":""},{"location":"introprogrammering.html#assembler","title":"Assembler","text":""},{"location":"introprogrammering.html#basic","title":"Basic","text":""},{"location":"introprogrammering.html#cobol","title":"Cobol","text":""},{"location":"introprogrammering.html#fortran","title":"Fortran","text":""},{"location":"introprogrammering.html#pascal","title":"Pascal","text":""},{"location":"introprogrammering.html#python","title":"Python","text":""},{"location":"introprogrammering.html#smalltalk","title":"Smalltalk","text":""},{"location":"introprogrammering.html#c","title":"C++","text":""},{"location":"introprogrammering.html#java","title":"Java","text":""},{"location":"introprogrammering.html#javascript","title":"JavaScript","text":""},{"location":"introprogrammering.html#f","title":"F","text":""},{"location":"introprogrammering.html#ruby","title":"Ruby","text":""},{"location":"introprogrammering.html#grundlggende-programmering","title":"Grundl\u00e6ggende programmering","text":"<p>De fleste programmeringssprog har features til f\u00e6lles</p> <ul> <li>Variabler</li> <li>Opbevaring af midlertidige v\u00e6rdier<ul> <li>Jf tidligere sektion om RAM</li> </ul> </li> <li>Flow instruktioner</li> <li>l\u00f8kker<ul> <li>loop et givet antal gange</li> </ul> </li> <li>betingelser<ul> <li>hvis et eller andet er sandt s\u00e5\u2026 ellers....</li> </ul> </li> <li>Funktioner</li> <li>Samling af instruktioner der nemt kan afvikles<ul> <li>med/uden argumenter</li> <li>med/uden returv\u00e6rdi</li> </ul> </li> </ul>"},{"location":"introprogrammering.html#typer-af-applikationer","title":"Typer af applikationer","text":"<ul> <li>Konsol</li> <li>Lokale GUI applikationer</li> <li>Web applikationer</li> <li>Web/Desktop</li> <li>Electron</li> <li>SOA</li> <li>Service-Oriented Architecture </li> <li>Mobile applikationer</li> <li>Embedded  </li> <li>PLC</li> <li>Espruino, Tessel.IO</li> <li>Rasberry Pie, Netdurino</li> <li>API / SDK</li> <li>application programming interface</li> <li>Test</li> <li>Unit test</li> <li>UI Test</li> <li>Integration test</li> </ul>"},{"location":"introprogrammering.html#udviklingsvrktjer","title":"Udviklingsv\u00e6rkt\u00f8jer","text":"<ul> <li>I de fleste programmeringssprog er kildekoden ren tekst</li> <li>Notepad</li> <li>Udviklingsmilj\u00f8er giver den bedste produktivitet</li> <li>\u201dVisuel\u201d kode</li> <li>L\u00f8bende baggrundskompilering</li> <li>Hj\u00e6lp til kodeskrivning</li> <li>Integration af forskellige v\u00e6rkt\u00f8jer</li> <li>Test</li> <li>Deployment</li> <li>Nogle af de kendte</li> <li>Visual Studio (.NET og meget meget)</li> <li>Visual Studio Code</li> <li>Eclipse (java +)</li> <li>Netbeans (java, c++, mv)</li> <li>gEdit (linux)</li> </ul>"},{"location":"introprogrammering.html#versionsource-control","title":"Version/source control","text":"<p>Source control - ogs\u00e5 kaldet version styring - benyttes prim\u00e6rt til styring af rettelser i kode. I dag kan de fleste systemer h\u00e5ndterer</p> <ul> <li>Rettelser</li> <li>Hvad er rettet</li> <li>Hvem har rettet</li> <li>Hvorn\u00e5r er der rettet</li> <li>Hvorfor er der rettet</li> <li>Versionstyring</li> <li>Branching</li> <li>Projektstyring</li> <li>Fejlrapportering </li> <li>Styring og automatisering af build</li> </ul> <p>Af kendte systemer findes</p> <ul> <li>Git</li> <li>Subversion</li> <li>Mercurial</li> </ul> <p>og de fleste v\u00e6lge at have sin \u201ckode i skyen\u201d - eksempelvis hos</p> <ul> <li>GitHub</li> <li>BitBucket</li> <li>AWS CodeCommit</li> <li>Microsoft Team Foundation Server</li> </ul>"},{"location":"introts.html","title":"Introduktion til TypeScript","text":"<p>TypeScript er et open-source programmeringssprog, der er bygget p\u00e5 JavaScript og har til form\u00e5l at tilf\u00f8je statisk typekontrol til JavaScript. Det blev oprindeligt udviklet af Microsoft og f\u00f8rste gang offentliggjort i 2012. TypeScript giver udviklere mulighed for at definere typer til variabler, funktioner og andre komponenter i deres kode, hvilket kan hj\u00e6lpe med at undg\u00e5 fejl og g\u00f8re koden nemmere at vedligeholde og forst\u00e5.</p> <p>Et simpelt eksempel p\u00e5 brug af TypeScript er at definere en variabel med en bestemt type, f.eks.</p> <p><pre><code>let navn: string = \"John Doe\";\n</code></pre> Et andet eksempel er at definere en funktion med specifikke parametre og en returtype:</p> <pre><code>function add(a: number, b: number): number {\nreturn a + b;\n}\n</code></pre> <p>I begge eksempler er typen angivet efter kolon. Det er ikke n\u00f8dvendigt at angive typen, men det giver udvikleren og andre, der arbejder med koden, mere information om, hvordan koden skal bruges og hvad den forventer at modtage som input og returnere som output.</p>"},{"location":"introts.html#kort","title":"Kort\u2026","text":"<ul> <li>http://www.typescriptlang.org</li> <li>Transpiler</li> <li>Skabt af blandt andet Anders Hejlsberg (C#, Delphi)</li> <li> <p>Historien bag TypeScript - se http://ithistorie.cronberg.dk</p> </li> <li> <p>Open Source</p> </li> <li>Microsoft/TypeScript</li> <li>Grundl\u00e6ggende features</li> <li>Superset af EcmaScript (alt ES er automatisk TS)</li> <li>Typest\u00e6rkt</li> <li>Transpiler nyere ES features tilbage til \u00e6ldre versioner af ES<ul> <li>Tillader brug af \u201cmoderne\u201d syntaks og features</li> </ul> </li> <li>St\u00e6rk support i udviklingmilj\u00f8er og tilh\u00f8rende v\u00e6rkt\u00f8jer</li> <li>Installeres typisk via NPM/Node (eller Visual Studio)</li> </ul>"},{"location":"introts.html#installering-via-node","title":"Installering via Node","text":"<p>K\u00f8r evt. som administator!</p> <pre><code>npm install typescript -g\n</code></pre> <p>R\u00e5 brug af transpiler</p> <pre><code>tsc helloworld.ts\n</code></pre> <p>Typisk benyttes en tsconfig.json fil</p> <pre><code>tsc --init\n</code></pre>"},{"location":"introts.html#udviklingmilj","title":"Udviklingmilj\u00f8","text":"<p>De fleste benytter VS Code med extensions.</p>"},{"location":"introts.html#den-hurtige-made-at-afvikledebuggelege-med-ts-og-node-i-vsc","title":"Den hurtige m\u00e5de at afvikle/debugge/lege med TS og node i VSC","text":"<p>devcronberg/ts-in-vsc</p>"},{"location":"introts.html#den-hurtige-made-at-afvikledebuggelege-med-ts-og-web-i-vsc","title":"Den hurtige m\u00e5de at afvikle/debugge/lege med TS og web i VSC","text":"<p>devcronberg/ts-in-parcel</p>"},{"location":"introvscode.html","title":"Introduktion til VS Code","text":""},{"location":"introvscode.html#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code (forkortet VSC) er p\u00e5 f\u00e5 \u00e5r blevet en af de mest benyttede teksteditorer til alle former for udvikling. I\u00a0Stack Overflow\u2019s unders\u00f8gelse\u00a0fra 2019 havde den overg\u00e5et b\u00e5de Visual Studio, Notepad++ og VIM.</p> <p>Den kan installeres p\u00e5 alle platforme fra</p> <p>https://code.visualstudio.com/</p> <p>og er skabt til udvikling med indbygget funktionalitet relateret til</p> <ul> <li>editering</li> <li>extensions</li> <li>git support</li> <li>brugertilpasning</li> </ul> <p>samtidigt er den super hurtig.</p> <p>Den er bygget i HTML, CSS og JavaScript p\u00e5\u00a0Electron platformen\u00a0af Microsoft.</p>"},{"location":"introvscode.html#video-installering-af-vsc-og-extensions","title":"Video: Installering af VSC og extensions","text":"Her er en kort video\u00a0som viser installation af VSC og en enkelt extension."},{"location":"introvscode.html#grundlggende-settings","title":"Grundl\u00e6ggende settings","text":"<p>P\u00e5 kan overvejer at s\u00e6tte VS op med</p> <ul> <li>Automatisk omd\u00f8bning af opm\u00e6rkninger<ul> <li>Linked editing under settings</li> </ul> </li> <li>\u00c5bn tom editor hver gang (uden tidligere filer)<ul> <li>Restore windows under settings</li> </ul> </li> </ul>"},{"location":"introvscode.html#dokumentation","title":"Dokumentation","text":"<p>Du b\u00f8r bruge noget tid p\u00e5 at l\u00e6se dokumentationen fra deres website - det er den bedste m\u00e5de at l\u00e6re om de forskellige features. Det vil spare mange timers udvikling. L\u00e6s (skim) blandt andet om</p> <ul> <li>Editering</li> <li>Extensions</li> <li>IntelliSense</li> <li>Code Navigation</li> <li>Refactoring</li> <li>Debugging</li> <li>Version Control</li> <li>Integrated Terminal</li> <li>Tasks</li> <li>Snippets</li> </ul>"},{"location":"introvscode.html#brug-af-vsc-til-html-udvikling","title":"Brug af VSC til HTML udvikling","text":"<p>Hvis du benytter VSC til HTML udvikling kan du optimere brugen p\u00e5 mange m\u00e5der.</p>"},{"location":"introvscode.html#emmet","title":"Emmet","text":"<p>Den st\u00f8rste feature er uden tvivl\u00a0Emmet\u00a0som du kan se som dynamiske snippets. Hvis du eksempelvis indtaster</p> <pre><code>h1\n</code></pre> <p>og trykker tabulering bliver det til</p> <pre><code>&lt;h1&gt;&lt;/h1&gt;\n</code></pre> <p>og s\u00e6tter cursoren det rigtige sted.</p> <p>Skriver du</p> <pre><code>div&gt;span\n</code></pre> <p>bliver det til</p> <pre><code>&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n</code></pre> <p>Emmet benytter kendte templates fra CSS hvor eksempelvis # betyder id og . betyder klasse. S\u00e5ledes vil dette</p> <pre><code>div#d1&gt;span.c1\n</code></pre> <p>blive til</p> <pre><code>&lt;div id=\"d1\"&gt;&lt;span class=\"c1\"&gt;&lt;/span&gt;&lt;/div&gt;\n</code></pre>"},{"location":"introvscode.html#wrap","title":"Wrap","text":"<p>Du kan ogs\u00e5 omkranse med opm\u00e6rkninger ved at bruge f1-menuen (Windows) og skrive wrap og v\u00e6lge \u201cWrap with appreviation\u201d og s\u00e5 skrive en emmet snippet. P\u00e5 den m\u00e5de kan</p> <pre><code>link\n</code></pre> <p>hurtigt blive til</p> <pre><code>&lt;a href=\"\" id=\"a1\"&gt;link&lt;/a&gt;\n</code></pre> <p>ved at skrive \u201ca#a1\u201d i \u201cWrap with appreviation\u201d.</p>"},{"location":"introvscode.html#actions","title":"Actions","text":"<p>P\u00e5 f1-menuen kan de mange \u201cactions\u201d findes ved at skrive \u201cemmet\u201d - pr\u00f8v eksempelvis \u201cUpdate image size\u201d som automatisk s\u00e6tte width og height.</p>"},{"location":"introvscode.html#egne-snippets","title":"Egne snippets","text":"<p>Du kan ogs\u00e5 oprette dine egne emmet snippets i VSC. Under settings skal du angive en mappe med snippets.</p>"},{"location":"introvscode.html#dokumentation_1","title":"Dokumentation","text":"<p>Det er kun toppen af isbjerget og du b\u00f8r bruge lidt tid p\u00e5 at lege med de mange muligheder. Se\u00a0https://docs.emmet.io/cheat-sheet.</p>"},{"location":"introvscode.html#eksempler-pa-emmet","title":"Eksempler p\u00e5 Emmet","text":"<p>Her er et par af mine mest benyttede snippets:</p> <pre><code>h1\n&lt;h1&gt;&lt;/h1&gt;\np&gt;lorem\n&lt;p&gt;Lorem ....&lt;/p&gt;\nnav&gt;ul&gt;li\n&lt;nav&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\ndiv+p+bq\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;&lt;/blockquote&gt;\nul&gt;li*5\n&lt;ul&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\ntable&gt;tr*3&gt;td*3\n&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\nul&gt;li.item$*5\n&lt;ul&gt;\n&lt;li class=\"item1\"&gt;&lt;/li&gt;\n&lt;li class=\"item2\"&gt;&lt;/li&gt;\n&lt;li class=\"item3\"&gt;&lt;/li&gt;\n&lt;li class=\"item4\"&gt;&lt;/li&gt;\n&lt;li class=\"item5\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\nh$[title=item$]{Header $}*3\n&lt;h1 title=\"item1\"&gt;Header 1&lt;/h1&gt;\n&lt;h2 title=\"item2\"&gt;Header 2&lt;/h2&gt;\n&lt;h3 title=\"item3\"&gt;Header 3&lt;/h3&gt;\nul&gt;li.item$$$*5\n&lt;ul&gt;\n&lt;li class=\"item001\"&gt;&lt;/li&gt;\n&lt;li class=\"item002\"&gt;&lt;/li&gt;\n&lt;li class=\"item003\"&gt;&lt;/li&gt;\n&lt;li class=\"item004\"&gt;&lt;/li&gt;\n&lt;li class=\"item005\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\ndiv#header\n&lt;div id=\"header\"&gt;&lt;/div&gt;\ndiv.title\n&lt;div class=\"title\"&gt;&lt;/div&gt;\nform#search.wide\n&lt;form id=\"search\" class=\"wide\"&gt;&lt;/form&gt;\np.class1.class2.class3\n&lt;p class=\"class1 class2 class3\"&gt;&lt;/p&gt;\np[title=\"Hello world\"]\n&lt;p title=\"Hello world\"&gt;&lt;/p&gt;\ntd[rowspan=2 colspan=3 title]\n&lt;td rowspan=\"2\" colspan=\"3\" title=\"\"&gt;&lt;/td&gt;\na{Click me}\n&lt;a href=\"\"&gt;Click me&lt;/a&gt;\np&gt;{Click }+a{here}+{ to continue}\n&lt;p&gt;Click &lt;a href=\"\"&gt;here&lt;/a&gt; to continue&lt;/p&gt;\na:link\n&lt;a href=\"http://\"&gt;&lt;/a&gt;\nlink:css\n&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n</code></pre>"},{"location":"introvscode.html#extensions","title":"Extensions","text":"<p>Der findes mange extensions relateret til HTML - her er nogle af dem jeg benytter</p> <ul> <li>Live Server (ritwickdey.liveserver)<ul> <li>Indbygget web server</li> </ul> </li> <li>Prettier (esbenp.prettier-vscode)<ul> <li>Formatering af blandt andet HTML</li> <li>S\u00e6t evt \u201cFormat On Save\u201d s\u00e5 der formateret n\u00e5r du gemmer filer</li> </ul> </li> <li>HTMLHint (mkaufman.htmlhint)<ul> <li>Kontrol af opm\u00e6rkning mod et s\u00e6t regler (ikke W3C)</li> </ul> </li> <li>Encode Decode (mitchdenny.ecdc)<ul> <li>encoding af eksempelvis \u00f8 til \u00f8</li> </ul> </li> <li>W3C Web Validator<ul> <li>Validering mod W3C</li> </ul> </li> </ul>"},{"location":"introvscode.html#snippets","title":"Snippets","text":"<p>Husk du kan nemt skabe dine egne snippets hvis der er nogle opm\u00e6rkninger du bruger meget.</p>"},{"location":"introvscode.html#brug-af-vsc-til-css-udvikling","title":"Brug af VSC til CSS udvikling","text":"<p>Hvis du benytter VSC til CSS udvikling kan du optimere brugen p\u00e5 mange m\u00e5der.</p>"},{"location":"introvscode.html#emmet_1","title":"Emmet","text":"<p>Der findes en masse snippets relateret til CSS. Eksempelvis vil</p> <pre><code>bg\n</code></pre> <p>blive til</p> <pre><code>background: #000;\n</code></pre> <p>eller</p> <pre><code>m20\n</code></pre> <p>til</p> <pre><code>margin: 20px;\n</code></pre> <p>Se de mangle muligheder p\u00e5\u00a0https://docs.emmet.io/cheat-sheet</p>"},{"location":"introvscode.html#extensions_1","title":"Extensions","text":"<p>Der findes mange extensions relateret til CSS - herunder er nogle af dem jeg selv bruger</p> <ul> <li>Prettier (esbenp.prettier-vscode)<ul> <li>Formatering af CSS mv</li> </ul> </li> <li>HTML CSS Support (ecmel.vscode-html-css)<ul> <li>Hj\u00e6lp til CSS id/klasse i opm\u00e6rkninger</li> </ul> </li> <li>cdnjs (JakeWilson.vscode-cdnjs)<ul> <li>Nem tilgang til css/script fra cndjs</li> </ul> </li> </ul>"},{"location":"introvscode.html#brug-af-vsc-til-jsts-udvikling","title":"Brug af VSC til JS/TS udvikling","text":"<p>Hvis du benytter VSC til JavaScript og TypeScript udvikling kan du optimere brugen p\u00e5 mange m\u00e5der. Start med at l\u00e6se\u00a0https://code.visualstudio.com/docs/languages/javascript\u00a0for at se alle mulighederne.</p>"},{"location":"introvscode.html#snippets_1","title":"Snippets","text":"<p>Der findes et hav af\u00a0snippets\u00a0i VSC til .js og .ts filer, og det er nemt at skabe sine egne. Her er et par af de mest benyttede:</p> <pre><code>for (for l\u00f8kke)\nif (betingelse)\nifelse (betingelse)\ncw (console.log)\n</code></pre>"},{"location":"introvscode.html#extensions_2","title":"Extensions","text":"<p>Jeg har f\u00f8lgende extensions installeret</p> <ul> <li>Live Server (ritwickdey.liveserver)<ul> <li>Indbygget web server</li> </ul> </li> <li>Visual Studio IntelliCode (visualstudioexptteam.vscodeintellicode)<ul> <li>Udvidet intellicense</li> </ul> </li> <li>Prettier (esbenp.prettier-vscode)<ul> <li>Formatering af blandt andet HTML</li> <li>S\u00e6t evt \u201cFormat On Save\u201d s\u00e5 der formateret n\u00e5r du gemmer filer</li> </ul> </li> <li>ESLint (dbaeumer.vscode-eslint)<ul> <li>Linter</li> </ul> </li> <li>TSLint (ms-vscode.vscode-typescript-tslint-plugin)<ul> <li>Linter</li> </ul> </li> <li>Debugger for Chrome (msjsdiag.debugger-for-chrome)</li> <li>Vetur (octref.vetur)<ul> <li>Vue udvikling (men der findes ogs\u00e5 til Angular, React mv)</li> </ul> </li> <li>cdnjs (JakeWilson.vscode-cdnjs)<ul> <li>Nem tilgang til css/script fra cndjs</li> </ul> </li> <li>Bracket Pair Colorizer 2 (CoenraadS.bracket-pair-colorizer-2)<ul> <li>Farve p\u00e5 tuborgklammer</li> </ul> </li> <li>indent-rainbow (oderwat.indent-rainbow)<ul> <li>Visuel indrykning</li> </ul> </li> </ul>"},{"location":"introvscode.html#debugging","title":"Debugging","text":"<p>Debuggeren i VSC er helt forrygende og du skal l\u00e6se lidt om den p\u00e5\u00a0https://code.visualstudio.com/docs/languages/javascript#_debugging</p>"},{"location":"introvscode.html#brug-af-vsc-til-c-udvikling","title":"Brug af VSC til C# udvikling","text":"<p>Hvis du arbejder med VSC til C# udvikling er det is\u00e6r snippets, extensions, og debuggeren som er interessant at se n\u00e6rmere p\u00e5. Start med at l\u00e6se\u00a0https://code.visualstudio.com/docs/languages/csharp.</p>"},{"location":"introvscode.html#snippets_2","title":"Snippets","text":"<p>De samme snippets man kender fra Visual Studio er ogs\u00e5 tilg\u00e6ngelige i Visual Studio Code - eksempelvis:</p> <pre><code>for (l\u00f8kke)\nif (betingelse)\nclass (klasse)\n</code></pre> <p>og s\u00e5 videre.</p>"},{"location":"introvscode.html#extensions_3","title":"Extensions","text":"<p>F\u00f8lgende extensions har jeg installeret</p> <ul> <li>C# (ms-dotnettools.csharp)<ul> <li>N\u00f8dvendig for C# udvikling</li> </ul> </li> <li>Code Runner (formulahendry.code-runner)<ul> <li>Afvikling af kode (herunder C#) direkte i VSC</li> </ul> </li> </ul>"},{"location":"introvuejs.html","title":"Introduktion til VueJS","text":"<p>Vue er et SPA framework som kan sammenlignes med Angular og React, men er noget mere simpelt at l\u00e6re.</p> <p>Vue er skabt af Evan You (tidligere Google/Angular) i 2013, og n\u00e6rmer sig sine konkurrenter i popularitet.</p> <p>Se http://ithistorie.cronberg.dk og Stack Overflow Survey</p>"},{"location":"introvuejs.html#brug-af-vue","title":"Brug af Vue","text":"<p>Vue kan - i mods\u00e6tning til andre SPA frameworks - benyttes p\u00e5 flere m\u00e5der. Den simple m\u00e5de er brug af et eller flere vue instance\u2019s og databinding direkte p\u00e5 en html-side/js-fil. Den mere avancerede m\u00e5de kr\u00e6ver en bundler som vue-cli, parcel eller lign., og giver mulighed for at skabe en \u201crigtig\u201d komponent- og rutebaseret SPA applikation. </p>"},{"location":"introvuejs.html#brug-af-vue-uden-bundler","title":"Brug af Vue uden bundler","text":"<p>Nemmeste m\u00e5de at komme i gang med Vue er direkte link til et CDN fra en HTML-side. Styring af data mv sker ved hj\u00e6lp af en instans af Vue-klassen, som er bundet til et element. I sin helt simple form:</p> <pre><code>var app = new Vue({\nel: \"#...\",\ndata: {\n...\n},\n});\n</code></pre> <p>Her er et mere komplet eksempel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Vue demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Simple demo af en Vue-instance&lt;/h1&gt;\n&lt;div id=\"app\"&gt;\n&lt;p&gt;{{ data_text }}&lt;/p&gt;\n&lt;p&gt;{{ computed_text }}&lt;/p&gt;\n&lt;p&gt;{{ method_text() }}&lt;/p&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar app = new Vue({\nel: \"#app\",\ndata: {\n// data (felter)\ndata_text: \"1\",\n},\ncomputed: {\n// egenskab (mulighed for cache hvis data ikke er \u00e6ndret og dermed bedre styring fra vue)\ncomputed_text: function () {\nreturn this.data_text + \"2\";\n},\n},\nmethods: {\n// metoder\nmethod_text: function () {\nreturn this.computed_text + \"3\";\n},\n},\n});\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introvuejs.html#databinding","title":"Databinding","text":"<p>Databinding kan ske enten i \u201cr\u00e5\u201d form med {{ \u2026 }} eller ved hj\u00e6lp af direktiver som v-bind. Her er eksempler p\u00e5 brug af flere former for databinding:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Simpel databinding&lt;/h1&gt;\n&lt;div id=\"app\"&gt;{{ message }}&lt;/div&gt;\n&lt;h1&gt;Brug af v-bind&lt;/h1&gt;\n&lt;div id=\"app-2\"&gt;\n&lt;span v-bind:title=\"message\"&gt;\n        Hover your mouse over me for a few seconds to see my dynamically bound title!\n      &lt;/span&gt;\n&lt;/div&gt;\n&lt;h1&gt;Brug af v-if&lt;/h1&gt;\n&lt;div id=\"app-3\"&gt;\n&lt;span v-if=\"seen\"&gt;Now you see me&lt;/span&gt;\n&lt;/div&gt;\n&lt;h1&gt;Brug af v-for&lt;/h1&gt;\n&lt;div id=\"app-4\"&gt;\n&lt;ol&gt;\n&lt;li v-for=\"todo in todos\"&gt;{{ todo.text }}&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;\n&lt;h1&gt;Brug af h\u00e6ndelser&lt;/h1&gt;\n&lt;div id=\"app-5\"&gt;\n&lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;button v-on:click=\"reverseMessage\"&gt;Reverse Message 1&lt;/button&gt;\n&lt;button @click=\"reverseMessage\"&gt;Reverse Message 2&lt;/button&gt;\n&lt;/div&gt;\n&lt;h1&gt;Brug af v-model&lt;/h1&gt;\n&lt;div id=\"app-6\"&gt;\n&lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;input v-model=\"message\" /&gt;\n&lt;/div&gt;\n&lt;h1&gt;Simpel komponent&lt;/h1&gt;\n&lt;div id=\"app-7\"&gt;\n&lt;ol&gt;\n&lt;todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\" v-bind:key=\"item.id\"&gt;&lt;/todo-item&gt;\n&lt;/ol&gt;\n&lt;/div&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar app = new Vue({\nel: \"#app\",\ndata: {\nmessage: \"Hello Vue!\",\n},\n});\nvar app2 = new Vue({\nel: \"#app-2\",\ndata: {\nmessage: \"You loaded this page on \" + new Date().toLocaleString(),\n},\n});\nvar app3 = new Vue({\nel: \"#app-3\",\ndata: {\nseen: true,\n},\n});\nvar app4 = new Vue({\nel: \"#app-4\",\ndata: {\ntodos: [\n{ text: \"Learn JavaScript\" },\n{ text: \"Learn Vue\" },\n{ text: \"Build something awesome\" },\n],\n},\n});\nvar app5 = new Vue({\nel: \"#app-5\",\ndata: {\nmessage: \"Hello Vue.js!\",\n},\nmethods: {\nreverseMessage: function () {\nthis.message = this.message.split(\"\").reverse().join(\"\");\n},\n},\n});\nvar app6 = new Vue({\nel: \"#app-6\",\ndata: {\nmessage: \"Hello Vue!\",\n},\n});\nVue.component(\"todo-item\", {\nprops: [\"todo\"],\ntemplate: \"&lt;li&gt;{{ todo.text }}&lt;/li&gt;\",\n});\nvar app7 = new Vue({\nel: \"#app-7\",\ndata: {\ngroceryList: [\n{ id: 0, text: \"Vegetables\" },\n{ id: 1, text: \"Cheese\" },\n{ id: 2, text: \"Whatever else humans are supposed to eat\" },\n],\n},\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introvuejs.html#brug-af-vue-med-bundler","title":"Brug af Vue med bundler","text":"<p>Vue er et komponentbaseret framework med de fordele ifbm indkapsling som det giver, men det kr\u00e6ver en bundler. Den nemmeste er Parcel som ogs\u00e5 giver en masse andre muligheder. </p> <p>Se evt devcronberg/vueappdemo eller pr\u00f8v f\u00f8lgende:</p> <p>Start et nyt project i en tom mappe med</p> <pre><code>npm init\nnpm install parcel --save-dev\n</code></pre> <p>Pr\u00f8v nu f\u00f8lgende filer i roden</p>"},{"location":"introvuejs.html#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Vue demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"app\"&gt;&lt;/div&gt;\n&lt;script src=\"./index.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introvuejs.html#indexjs","title":"index.js","text":"<pre><code>import Vue from \"vue\";\nimport App from \"./App.vue\";\nnew Vue({ render: (createElement) =&gt; createElement(App) }).$mount(\"#app\");\n</code></pre>"},{"location":"introvuejs.html#appvue","title":"app.vue","text":"<pre><code>&lt;template&gt;\n&lt;div&gt;\n&lt;div&gt;Demo af terning&lt;/div&gt;\n&lt;hr /&gt;\n&lt;terning&gt;&lt;/terning&gt;\n&lt;terning snyd=\"true\"&gt;&lt;/terning&gt;\n&lt;terning snyd=\"true\"&gt;&lt;/terning&gt;\n&lt;terning startV\u00e6rdi=\"1\"&gt;&lt;/terning&gt;\n&lt;terning startV\u00e6rdi=\"5\" snyd=\"true\"&gt;&lt;/terning&gt;\n&lt;terning startV\u00e6rdi=\"1\" snyd=\"false\"&gt;&lt;/terning&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport Vue from \"vue\";\nimport Terning from \"./terning.vue\";\nexport default Vue.extend({\ncomponents: {\nTerning: Terning,\n},\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"introvuejs.html#terningvue","title":"terning.vue","text":"<pre><code>&lt;template&gt;\n&lt;div&gt;\n    [ &lt;span :class=\"{ sekser: erSekser }\"&gt;{{ v\u00e6rdi }}&lt;/span&gt; ] &lt;button @click=\"ryst\"&gt;Ryst&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport Vue from \"vue\";\nexport default Vue.extend({\ndata() {\nreturn {\nv\u00e6rdi: 1,\n};\n},\ncomputed: {\nerSekser: function() {\nreturn this.v\u00e6rdi == 6;\n},\n},\nprops: [\"startV\u00e6rdi\", \"snyd\"],\ncreated: function() {\nif (this.startV\u00e6rdi === undefined) this.ryst();\nelse this.v\u00e6rdi = this.startV\u00e6rdi;\n},\nmethods: {\nryst: function() {\nif (this.snyd === undefined || this.snyd === false) {\n// mellem 1-6\nthis.v\u00e6rdi = Math.floor(Math.random() * 6 + 1);\n} else {\n// mellem 5-6\nthis.v\u00e6rdi = Math.floor(Math.random() * 2 + 5);\n}\n},\n},\n});\n&lt;/script&gt;\n&lt;style scoped&gt;\n.sekser {\nbackground-color: green;\ncolor: white;\n}\ndiv {\nmargin: 5px;\n}\n&lt;/style&gt;\n</code></pre> <p>Tilret package.json med et script som eksempelvis dev</p> <pre><code>{\n\"name\": \"undervisning-vue\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"dev\": \"parcel dev index.html \"\n},\n\"author\": \"\",\n\"license\": \"ISC\",\n\"dependencies\": {\n\"vue\": \"^2.6.12\",\n},\n\"devDependencies\": {\n\"parcel\": \"^1.12.4\",\n}\n}\n</code></pre> <p>og pr\u00f8v at afvikle applikationen med </p> <pre><code>npm run dev\n</code></pre>"},{"location":"introwebapp.html","title":"Introduktion til web apps","text":"<p>Jo mere der kan afvikles p\u00e5 klienten (typisk browseren) jo bedre. Det vil spare ressourcer p\u00e5 serveren og g\u00f8re brugeroplevelsen bedre. Det var is\u00e6r biblioteket jQuery som kickstartede klientbaseret udvikling fordi det blev nemt og sikkert (i forhold til gamle browser versioner) at opdatere DOM, generere brugerflade elementer og foretage HTTP API kald.</p> <p>Hvis man ikke har behov for en server (m\u00e5ske bortset fra at levere statisk HTML, CSS og JavaScript) kan man sagtens benytte almindelig JavaScript eller biblioteker som jQuery til at skabe en applikation. Her er eksempelvis en side som beregner arealet p\u00e5 en firkant i almindelig JavaScript.</p>"},{"location":"introwebapp.html#eksempel-pa-en-ra-js-applikation","title":"Eksempel p\u00e5 en \u201cr\u00e5\u201d JS applikation","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Areal&lt;/title&gt;\n&lt;style&gt;\n.input span {\ndisplay: inline-block;\nwidth: 100px;\nmargin: 10px;\n}\nbutton {\nmargin: 10px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Beregning af areal&lt;/h1&gt;\n&lt;div class=\"input\"&gt;\n&lt;div&gt;&lt;span&gt;L\u00e6ngde&lt;/span&gt;&lt;input id=\"l\u00e6ngde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Bredde&lt;/span&gt;&lt;input id=\"bredde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Areal&lt;/span&gt;&lt;input id=\"areal\" type=\"number\" readonly /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;button id=\"beregn\"&gt;Beregn&lt;/button&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\ndocument.querySelector(\"#beregn\").onclick = () =&gt; {\nlet l = parseFloat(document.querySelector(\"#l\u00e6ngde\").value);\nlet b = parseFloat(document.querySelector(\"#bredde\").value);\nlet a = l * b;\ndocument.querySelector(\"#areal\").value = a;\n};\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introwebapp.html#eksempel-pa-en-jquery-applikation","title":"Eksempel p\u00e5 en jQuery applikation","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Areal&lt;/title&gt;\n&lt;style&gt;\n.input span {\ndisplay: inline-block;\nwidth: 100px;\nmargin: 10px;\n}\nbutton {\nmargin: 10px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Beregning af areal&lt;/h1&gt;\n&lt;div class=\"input\"&gt;\n&lt;div&gt;&lt;span&gt;L\u00e6ngde&lt;/span&gt;&lt;input id=\"l\u00e6ngde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Bredde&lt;/span&gt;&lt;input id=\"bredde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Areal&lt;/span&gt;&lt;input id=\"areal\" type=\"number\" readonly /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;button id=\"beregn\"&gt;Beregn&lt;/button&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(\"#beregn\").click(() =&gt; {\nlet l = parseFloat($(\"#l\u00e6ngde\").val());\nlet b = parseFloat($(\"#bredde\").val());\nlet a = l * b;\n$(\"#areal\").val(a);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introwebapp.html#eksempel-pa-en-ra-spa-applikation","title":"Eksempel p\u00e5 en \u201cr\u00e5\u201d SPA applikation","text":"<p>I moderne applikationer vil man gerne holde brugeren p\u00e5 samme side for at g\u00f8re oplevelsen bedre og bevare tilstand. Pr\u00f8v f\u00f8lgende eksempel:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Areal&lt;/title&gt;\n&lt;style&gt;\n.input span {\ndisplay: inline-block;\nwidth: 100px;\nmargin: 10px;\n}\nbutton {\nmargin: 10px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Beregning af areal&lt;/h1&gt;\n&lt;div&gt;[&lt;a href=\"#\" id=\"menuFirkant\"&gt;Firkant&lt;/a&gt;] [&lt;a href=\"#\" id=\"menuTrekant\"&gt;Trekant&lt;/a&gt;]&lt;/div&gt;\n&lt;section id=\"firkant\"&gt;\n&lt;h2&gt;Firkant&lt;/h2&gt;\n&lt;div class=\"input\"&gt;\n&lt;div&gt;&lt;span&gt;L\u00e6ngde&lt;/span&gt;&lt;input id=\"l\u00e6ngde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Bredde&lt;/span&gt;&lt;input id=\"bredde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Areal&lt;/span&gt;&lt;input id=\"arealf\" type=\"number\" readonly /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;button id=\"beregnf\"&gt;Beregn&lt;/button&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;section id=\"trekant\"&gt;\n&lt;h2&gt;Trekant&lt;/h2&gt;\n&lt;div class=\"input\"&gt;\n&lt;div&gt;&lt;span&gt;H\u00f8jde&lt;/span&gt;&lt;input id=\"h\u00f8jde\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Grundlinje&lt;/span&gt;&lt;input id=\"grundlinje\" type=\"number\" /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;Areal&lt;/span&gt;&lt;input id=\"arealt\" type=\"number\" readonly /&gt;&lt;/div&gt;\n&lt;div&gt;&lt;button id=\"beregnt\"&gt;Beregn&lt;/button&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n// N\u00e5r siden loader vises firkant\n$(\"#trekant\").hide();\n$(\"input\").val(0);\n$(\"#menuFirkant\").click(() =&gt; {\n$(\"#trekant\").hide();\n$(\"#firkant\").show();\n$(\"input\").val(0);\n});\n$(\"#menuTrekant\").click(() =&gt; {\n$(\"#trekant\").show();\n$(\"#firkant\").hide();\n$(\"input\").val(0);\n});\n$(\"#beregnf\").click(() =&gt; {\nlet l = parseFloat($(\"#l\u00e6ngde\").val());\nlet b = parseFloat($(\"#bredde\").val());\nlet a = l * b;\n$(\"#arealf\").val(a);\n});\n$(\"#beregnt\").click(() =&gt; {\nlet h = parseFloat($(\"#h\u00f8jde\").val());\nlet g = parseFloat($(\"#grundlinje\").val());\nlet a = h * g * 0.5;\n$(\"#arealt\").val(a);\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>Det bliver dog hurtigt for komplekst selv at styre tilstand, links udefra (rute), sikkerhed, DOM manipulation med videre. Derfor findes de efterh\u00e5nden mange SPA frameworks.</p>"},{"location":"introwebapp.html#eksempel-pa-http-kald-ajax","title":"Eksempel p\u00e5 HTTP kald (AJAX)","text":"<p>Dette eksempel benytter b\u00e5de jQuery og underscore</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n&lt;title&gt;Kommuner i DK&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Kommuner i Danmark&lt;/h1&gt;\n&lt;button&gt;Hent info om alle kommuner&lt;/button&gt;\n&lt;ul id=\"lst\" /&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.11.0/underscore-min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(\"button\").click(() =&gt; {\nconst ul = $(\"#lst\");\nul.empty();\nlet data = $.get(\"https://dawa.aws.dk/kommuner/\", (data) =&gt; {\n// skab et array af objekter med navn og kode (sk\u00e6rer resten fra)\nlet navne = _.map(data, (o) =&gt; ({\nnavn: o.navn,\nkode: o.kode,\n}));\nnavne.forEach((v) =&gt; {\nlet li = $(\"&lt;li/&gt;\").html(`${v.kode}: ${v.navn}`);\nul.append(li);\n});\n});\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"introwebapp.html#spa-applikationer","title":"SPA Applikationer","text":"<p>SPA er en forkortelse for Single Page Application. og man kan komme langt med udvikle egne simple \u201cenkelt side\u201d applikationer med r\u00e5 JavaScript eller eksempelvis jQuery. Men man l\u00f8ber hurtigt panden mod muren n\u00e5r applikationen vokser og kommer til at mangle hj\u00e6lp til </p> <ul> <li>komponentbaseret udvikling</li> <li>databinding</li> <li>links til funktioner - b\u00e5de interne og eksterne</li> <li>tilstand</li> <li>sikkerhed</li> <li>generelle udviklingsv\u00e6rkt\u00f8jer til fejlfinding mv</li> </ul> <p>Derfor findes der en del SPA frameworks der kan hj\u00e6lpe.</p>"},{"location":"introwebapp.html#forskellige-frameworks","title":"Forskellige frameworks","text":"<p>Der er is\u00e6r 5 framework som bliver brugt meget</p> <ul> <li>Angular (Google)</li> <li>React (Facebook)</li> <li>Vue</li> <li>Ember</li> <li>Svelte</li> </ul> <p>De er alle forskellige fra hinanden og det er lidt en religion hvilket framework man foretr\u00e6kker. Angular er nok mest brugt men er sammen med React nok ogs\u00e5 de sv\u00e6reste at l\u00e6re. Vue er noget nemmere at komme igang med.</p>"},{"location":"introwebapp.html#spa-udviklingsprocessen","title":"SPA udviklingsprocessen","text":"<p>En af de ting som g\u00f8r udviklingsprocessen kompleks i relation til SPA er applikationer er, at den komponentbaserede udvikling kr\u00e6ver brug af pakkemoduler som WebPack, Browserify eller Parcel. S\u00e5 det er typisk en relativ kompleks Node-applikation der skal skabes for at underst\u00f8tte en SPA udvikling. </p>"},{"location":"introwebapp.html#cli","title":"CLI","text":"<p>De fleste framework kommer med en CLI (Command Line Interface) som kan bruges til at</p> <ul> <li>Oprette applikationer</li> <li>Vedligeholde applikationer</li> <li>Afvikle applikationer</li> <li>Bygge applikationer</li> </ul>"},{"location":"introwebapp.html#eksempel-pa-en-spa","title":"Eksempel p\u00e5 en SPA","text":"<p>P\u00e5 </p> <p>devcronberg/vueappdemo</p> <p>finder du et simpelt eksempel p\u00e5 en Vue SPA der benytter </p> <ul> <li>node som udviklingsprocess</li> <li>komponenter</li> <li>databinding</li> <li>rute</li> </ul>"},{"location":"links.html","title":"Generelle links","text":"<p>Dette links er relateret til Michell\u2019s kurser og foredrag. Fejl, rettelser og tilf\u00f8jelser im\u00f8deses meget gerne.</p>"},{"location":"links.html#udviklingsmilj-og-pluginsextensions","title":"Udviklingsmilj\u00f8 og plugins/extensions","text":""},{"location":"links.html#visual-studio","title":"Visual Studio","text":"<ul> <li>Visual Studio </li> <li>Visual Studio Extensions<ul> <li>Resharper</li> <li>CodeMaid</li> <li>Open Command Line</li> <li>Add New File</li> </ul> </li> <li>Snippets<ul> <li>Ekstra C# snippets</li> </ul> </li> <li>.editorconfig brugt p\u00e5 kurser</li> </ul>"},{"location":"links.html#visual-studio-code","title":"Visual Studio Code","text":"<ul> <li>Visual Studio Code<ul> <li>Emmet</li> <li>Eksempler p\u00e5 mest brugte Emmet funktioner</li> <li>Emmet Cheatsheet</li> <li>Snippets</li> <li>Snippets JavaScript</li> <li>Snippets TypeScript</li> <li>Snippets MarkDown</li> <li>Keyboard shortcuts</li> <li>Keyboard shortcuts ekstra</li> <li>Plugins til VSC (s\u00f8g efter dem i VSC eller p\u00e5 marketplace). Du kan ogs\u00e5 finde en extensions.json, og placere denne under /.vscode. S\u00e5 dukker extensions op som anbefalede.</li> <li>CSharp</li> <li>Prettier</li> <li>HTMLHint  </li> <li>W3C Web Validator</li> <li>Markdown all in one      </li> <li>IntelliSense for CSS class names in HTML</li> <li>ESLint</li> <li>TSLint      </li> <li>Live Server</li> <li>CSSTree validator</li> <li>Visual Studio IntelliCode</li> <li>Bracket Pair Colorizer</li> <li>JavaScript (ES6) code snippets</li> </ul> </li> </ul>"},{"location":"links.html#andet","title":"Andet","text":"<ul> <li>Rider</li> </ul>"},{"location":"links.html#programmeringssprog","title":"Programmeringssprog","text":"<p>Links til diverse programmeringssprog</p> <ul> <li>C#</li> <li>dotnet-script</li> <li>Se i \u00f8vrigt SharpLab</li> <li>F#</li> <li>Q#</li> <li>JavaScript/EcmaScript</li> <li>TypsScript</li> <li>Rust</li> <li>R</li> <li>Python</li> <li>StackOverflow Survey</li> </ul>"},{"location":"links.html#runtime","title":"Runtime","text":"<ul> <li>Node</li> <li>.NET Core</li> <li>.NET Framework</li> <li>Python</li> </ul>"},{"location":"links.html#browsere","title":"Browsere","text":"<ul> <li>Chrome</li> <li>Validity</li> <li>Markdown Viewer</li> <li>Yet Another REST Client</li> <li>Web Developer </li> <li>json-formatter</li> <li>Copy CSS selector</li> <li>Autofill</li> <li>Canary</li> <li>Brave</li> <li>Firefox </li> <li>Microsoft Edge </li> <li>Opera</li> <li>Vivaldi</li> </ul>"},{"location":"links.html#standarder","title":"Standarder","text":"<ul> <li>HTML (5.1)</li> <li>HTML W3C validator</li> <li>Validity - Chrome plugin</li> <li>HTML5 Boilerplate - HTML template</li> <li>CSS (current work)</li> <li>CSS W3C validator</li> <li>HTML5Up - HTML og CSS templates</li> <li>Brug eventuelt \u201cCan I Use\u201d for at f\u00e5 en ide om support </li> <li>ECMA (2019)</li> <li>ES Lint</li> <li>WebAssembly (webassembly.org)</li> </ul>"},{"location":"links.html#web-udvikling","title":"Web udvikling","text":""},{"location":"links.html#teknologier","title":"Teknologier","text":"<ul> <li>Electron - desktop udvikling</li> <li>Cordova - mobil udvikling</li> <li>PhoneGap </li> <li>MVC</li> <li>Blazor</li> <li>Awesome Blazor - A collection of awesome Blazor resources</li> <li>Blazor University</li> <li>Radzen UI komponeneter</li> <li>MatBlazor UI komponenter</li> <li>MudBlazor UI komponenter</li> <li>Blazorise UI</li> </ul>"},{"location":"links.html#diverse-vrktjer-og-ressourcer-til-web-udvikling-og-andet","title":"Diverse v\u00e6rkt\u00f8jer og ressourcer til web udvikling (og andet)","text":"<ul> <li>K\u00e6mpe samling af links og ressourcer til Web UI</li> <li>HTML Cleaner</li> <li>Front-end Developer Handbook</li> <li>Fiddler - HTTP Proxy</li> <li>Curl - HTTP via konsol </li> <li>HTTPBin - test af HTTP</li> <li>BrowserStack - UI test</li> <li>Awesome WASM</li> <li>Lorem Ipsum - tekst</li> <li>Bookmarklet</li> <li>Flexyboxes - editor til FlexBox</li> <li>Billeder</li> <li>animaticons</li> <li>blush - illustrationer</li> <li>Flickr</li> <li>Pixabay - gratis billeder </li> <li>Pexels - gratis billeder og video</li> <li>Burst - gratis billeder</li> <li>Picsum - Temp. billeder</li> <li>Unsplash</li> <li>PlaceHolder</li> <li>NASA Visible Earth </li> <li>tablericons</li> <li>Google fonts</li> <li>Lyde</li> <li>SoundBible</li> <li>FreeSound</li> <li>Favicon</li> <li>Favicon - favicon baseret p\u00e5 tekst</li> <li>Gauger - favicon baseret p\u00e5 Font Awesome</li> <li>\u201cLegepladser\u201d</li> <li>Code Sandbox</li> <li>Playcode - nem HTML/JS/CSS legeplads</li> <li>Codepen - HTML/CSS/JS (mv) legeplads</li> <li>Hosting</li> <li>Netlify - nem SPA hostning baseret p\u00e5 github</li> <li>CSS Frameworks</li> <li>Sammenligning af CSS Frameworks</li> <li>Fomantic</li> <li>Awesome CSS Frameworks</li> <li>Skabeloner</li> <li>HTML5 Boilerplate</li> <li>HTML5Up</li> </ul>"},{"location":"links.html#diverse-htmlcssjswasm-eksempler","title":"Diverse HTML/CSS/JS/WASM eksempler","text":"<ul> <li>Simpel WebApp - HTML/CSS/JS/WASM </li> <li>Aqarium</li> <li>Sol system</li> <li>Shapes of CSS</li> <li>SpinKit</li> <li>HoverCSS</li> <li>AnimateCSS</li> <li>Periodisk tabel</li> <li>Blazor spil</li> </ul>"},{"location":"links.html#opgaver-relateret-til-web-udvikling","title":"Opgaver relateret til web udvikling","text":"<ul> <li>Opgaver til HTML</li> <li>Opgaver til CSS</li> <li>Opgaver til JS</li> <li>Opgaver til TS</li> <li>CSS Dinner - genial m\u00e5de at l\u00e6re at bruge en CSS selector</li> </ul>"},{"location":"links.html#serviceapirest","title":"Service/API/REST","text":"<ul> <li>Restdb.io</li> <li>Free Weather API</li> <li>Public API</li> <li>Any API</li> <li>AirTable</li> <li>DR RSS</li> <li>Valutakurser via exchangerate.host</li> <li>Random.org - tilf\u00e6ldige tal via service</li> <li>Filltext - simpel tilf\u00e6ldig JSON data</li> <li>Jsonplaceholder</li> <li>GSX2JSON - Google Spreadsheet to JSON API service</li> <li>World Time API</li> <li>OpenWeatherMap (brug venligst egen gratis APPID)</li> <li>Byer</li> <li>Forecast</li> <li>DAWA</li> <li>Kommuner</li> <li>Landsdele</li> <li>Postnumre</li> <li>Regioner</li> <li>Byer</li> <li>My JSON Server</li> <li>Unsplash billeder</li> <li>RandomUser</li> <li>NASA API</li> <li>ISS Now</li> <li>GitHub Repositories</li> </ul>"},{"location":"links.html#container","title":"Container","text":"<ul> <li>Docker</li> <li>Simpel REST demo</li> <li>HTTPBin - HTTP test gennem docker</li> <li>Kubernetes</li> </ul>"},{"location":"links.html#spil-og-3d","title":"Spil og 3D","text":"<ul> <li>Unity</li> <li>MonoGame</li> <li>[Installation VS}(https://docs.monogame.net/articles/getting_started/1_setting_up_your_development_environment_windows.html)</li> <li>OpenMonoGameArt (Se feks Kenney)</li> </ul>"},{"location":"links.html#automatisering-software-robotter","title":"Automatisering / software robotter","text":"<ul> <li>AutoHotkey</li> <li>Lille demo script</li> <li>Blue Prism</li> <li>UI Path</li> <li>Power Automate</li> </ul>"},{"location":"links.html#grundlggende-it","title":"Grundl\u00e6ggende IT","text":"<ul> <li>CS Demo - talsystemer, porte mv</li> <li>Software Flaws disaster - fejl grundet brug af forkerte variabeltyper</li> </ul>"},{"location":"links.html#aiml","title":"AI/ML","text":"<ul> <li>Chat GPT</li> <li>Awesome AI</li> <li>Awesome ChatGPT</li> <li>ML.NET</li> <li>The age of AI - YouTube</li> <li>16 Best Free AI Art Generators:</li> </ul>"},{"location":"links.html#programmering-og-brn","title":"Programmering og b\u00f8rn","text":"<ul> <li>Micro:Bit</li> <li>Awesome MicroBit</li> <li>AppInventor</li> <li>Scratch</li> <li>Coding Pirates</li> <li>Hour of code - DK</li> </ul>"},{"location":"links.html#elektronik","title":"Elektronik","text":"<ul> <li>Tinkercad Circuit Sim</li> <li>Michells SAP CPU</li> <li>Logisim - simulering af logiske komponenter</li> <li>Ben Eaters 8 bit computer</li> </ul>"},{"location":"links.html#undervisning","title":"Undervisning","text":"<ul> <li>Teach Yourself Computer Science</li> <li>Pluralsight</li> <li>Online Computer Science Courses</li> <li>Marty Lobdell - Study Less Study Smart</li> </ul>"},{"location":"links.html#bger","title":"B\u00f8ger","text":"<ul> <li>Most influential books for programmers</li> <li>Weaving the Web - Tim Berners Lee</li> <li>B\u00f8ger om arkitektur</li> <li>Cracking the Coding Interview - Gayle Laakmann McDowell</li> <li>Head First Design Patterns - Eric Freeman</li> <li>Clean Code: A Handbook of Agile Software Craftsmanship - Robert C. Martin</li> <li>Clean Architecture: A Craftsman\u2019s Guide to Software Structure and Design - Robert C. Martin</li> <li>Design patterns - gang of four</li> <li>The Pragmatic Programmer - David Thomas</li> <li>Bogen om C# 8.0 - Michell Cronberg</li> <li>CODE: The hidden language of computer hardware and software - Charles Petzold</li> <li>Fort\u00e6llingen om universet - Tina Ibsen</li> <li>Hitchhiker\u2019s Guide to the Galaxy - Douglas Adams </li> </ul>"},{"location":"links.html#nyhedsbreve-blogs-podcast","title":"Nyhedsbreve, blogs, podcast","text":"<ul> <li>Hackernewsletter</li> <li>State of JS</li> <li>W3C blog (har ogs\u00e5 nyhedsbrev)</li> <li>JavaScript Weekly</li> <li>Frontend Focus</li> <li>Version2</li> <li>videnskab.dk</li> <li>Node Weekly</li> <li>Kortsluttet p\u00e5 P1</li> </ul>"},{"location":"links.html#diverse-programmer","title":"Diverse programmer","text":"<ul> <li>AutoHotKey</li> <li>Diverse scripts</li> <li>BareTail - god til log filer</li> <li>Git for Windows</li> <li>MKDocs/Material - dokumentation mv</li> </ul>"},{"location":"links.html#historie","title":"Historie","text":"<ul> <li>IT Historie</li> <li>computerhistory.org</li> <li>Admiral Grace Hopper Explains the Nanosecond</li> <li>Dokumentar om opfindelsen af transitoreren</li> <li>The mother of all demos - Douglas Engelbart (mus 32:00) (Wikipedia)</li> <li>Ikonisk billede af Margaret Hamilton/MIT/Nasa</li> <li>Se ogs\u00e5 \u2018The software that sent humans to the Moon\u2019</li> <li>Ikonisk billede af \u201cen bug\u201d fra en rel\u00e6 computer (MARK II) i 1946. Bug fundet af [Grace Hopper] - en af pionerne bag programmeringssprog (herunder COBOL)</li> <li>Store danske videnskabsfolk (udsendelser fra DR tilg\u00e6ngelig til sep 2020)</li> <li>Tycho Brahe</li> <li>Niels Bohr</li> <li>Ole R\u00f8mer</li> <li>Teorien om det hele - Holger Bech Nielsen</li> <li>Diverse navne med links relateret til IT teknologi (prim\u00e6rt udvikling)</li> <li>Joseph Marie Jacquard</li> <li>Herman Hollerith</li> <li>Ada Lovelace</li> <li>Charles Babbage</li> <li>George Boole</li> <li>Allan Turing</li> <li>Alonzo Church</li> <li>John von Neumann</li> <li>Claude Elwood Shannon</li> <li>John Bardeen</li> <li>William Bradford Shockley Jr</li> <li>Walter Houser Brattain</li> <li>Jack St. Clair Kilby</li> <li>Douglas Engelbart </li> <li>Grace Hopper</li> <li>Margaret Hamilton</li> <li>Bill Gates</li> <li>Paul Allen</li> <li>Steve Wozniak</li> <li>Steve Jobs</li> <li>Tim Berners-Lee</li> <li>Henrik Frystyk Nielsen</li> <li>H\u00e5kon Wium Lie</li> <li>Brendan Eich</li> <li>Ryan Dahl</li> </ul>"},{"location":"links.html#videnskab","title":"Videnskab","text":"<ul> <li>Planetarium</li> <li>Danmarks Tekniske Museum</li> <li>SpaceX\u2019s Falcon Heavy rocket land all 3 boosters for the first time</li> </ul>"},{"location":"links.html#om-michell","title":"Om Michell","text":"<ul> <li>Michell Cronberg</li> <li>Instrukt\u00f8r, forfatter, konsulent</li> <li>LinkedIn</li> <li>T-Shirts</li> </ul>"},{"location":"openai.html","title":"Open AI ChatGPT","text":"<p>Hvis du bruger OpenAIs egen klient er det vigtig at s\u00e6tte det rigtig kontekst s\u00e5 modellen ved hvad den har med at g\u00f8re. Start evt. med</p> <pre><code>Glem alle samtaler vi har haft tidligere. Du er en erfaren javascript instrukt\u00f8r \nder har undervist i mange \u00e5r, og jeg er en studerende som ikke kender javascript. \nJeg har erfaring med andre programmeringssprog som eksempelvis C# - s\u00e5 jeg ved lidt \nom programmering. S\u00f8rg for ALTID at stille sp\u00f8rgsm\u00e5l s\u00e5 du er helt klar over hvad \njeg sp\u00f8rger om. Jeg skriver sp\u00f8rgsm\u00e5l p\u00e5 dansk og forventer svar p\u00e5 dansk, men\nalt kode og kommentarer skal v\u00e6re p\u00e5 engelsk. Dit f\u00f8rste svar skal blot v\u00e6re en\nsummering - s\u00e5 sp\u00f8rger jeg selv ind hvis jeg har behov for uddybning. \nEr det forst\u00e5et?\n</code></pre> <p>Herefter kan du stille sp\u00f8rgsm\u00e5l som</p> <pre><code>Hvordan genneml\u00f8ber jeg bedst et array\n</code></pre>"},{"location":"opgaver.html","title":"Indledning","text":"<p>Denne mappe indeholder forskellige opgaver du kan bruge til at \u00f8ve dig lidt.</p>"},{"location":"opgavercss.html","title":"Opgaver til CSS","text":"<p>Her er forskellige opgaver relateret til brug af CSS.</p>"},{"location":"opgavercss.html#opgaver","title":"Opgaver","text":"<ul> <li>Start</li> <li>CSS Diner</li> <li>Selector</li> <li>Tekst</li> <li>Box model</li> <li>Media typer</li> <li>Media query</li> <li>Animation</li> <li>SemanticUI</li> </ul>"},{"location":"opgaverdom.html","title":"Opgaver til DOM","text":"<p>Her er forskellige opgaver relateret til programmering mod browserens DOM (Document Object Model).</p>"},{"location":"opgaverdom.html#opgaver","title":"Opgaver","text":"<ul> <li>Hello World - klik p\u00e5 en knap for at \u00e6ndre en tekst</li> <li>Opret en liste - klik p\u00e5 en knap for at oprette en liste af data</li> <li>Regnemaskine - l\u00e6g to tal sammen </li> </ul>"},{"location":"opgaverhtml.html","title":"Opgaver til HTML","text":"<p>Her er forskellige opgaver relateret til brug af HTML.</p>"},{"location":"opgaverhtml.html#opgaver","title":"Opgaver","text":"<ul> <li>Start</li> <li>Semantik</li> <li>Tekst</li> <li>Billeder og links</li> <li>Lister</li> <li>Tabel</li> <li>Formularer</li> </ul>"},{"location":"opgaverjs.html","title":"Opgaver til JavaScript","text":"<p>Her finder du forskellige opgaver relateret til JavaScript.</p>"},{"location":"opgaverjs.html#opgaver","title":"Opgaver","text":"<ul> <li>Kom godt igang med Node og browser</li> <li>Simple variabler</li> <li>Skab en ti-tabel med for-l\u00f8kker</li> <li>Leg med array</li> <li>Simple funktioner</li> <li>Pr\u00f8v forskellige typer af funktioner</li> <li>Leg med en callback funktion</li> <li>Funktion der returnerer en funktion</li> <li>Simpelt brug af et objekt</li> <li>Brug af objekter</li> <li>Simpel klasse</li> <li>Brug af et eget udviklet eksternt modul gennem Node</li> <li>Terninger og b\u00e6ger</li> <li>Brug af et eksternt modul fra NPM gennem Node</li> <li>Brug af et eksternt modul gennem en browser</li> <li>Forskellige m\u00e5der at kode asynkront</li> <li>Brug af AJAX / Fetch</li> </ul>"},{"location":"opgaverjs.html#setup","title":"Setup","text":"<p>Det foruds\u00e6ttes, at du har installeret Node og VS Code med f\u00f8lgende extensions:</p> <ul> <li>Live Server</li> <li>Prettier</li> </ul> <p>Yderligere anbefales Chrome.</p>"},{"location":"programmeringmeddom.html","title":"Programmering mod DOM","text":""},{"location":"programmeringmeddom.html#objekter-fra-browseren","title":"Objekter fra browseren","text":"<p>Samtlige browsere indeholder et API til manipulering af DOM (Document Object Model) s\u00e5ledes at HTML elementer kan tilrettes, fjernes og tilf\u00f8jes. DOM er standadiseret af W3C.</p> <p>Du kan v\u00e6lge at arbejde direkte med DOM gennem r\u00e5 JavaScript eller benytte biblioteker (eksempelvis jQuery) eller frameworks (eksempelvis Vue, Angular eller React).</p> <p>I den r\u00e5 form stiller browseren forskellige objekter til r\u00e5dighed</p> <ul> <li>window</li> <li>navigator</li> <li>history</li> <li>screen</li> <li>location</li> <li>document</li> <li>statiske metoder<ul> <li>alert, setInterval mv</li> </ul> </li> </ul> <p>og samtlige HTML elementer er mappet til en konkret type (HTMLButtonElement, HTMLInputElement, HTMLSpanElement, HTMLParagrahElement mv).</p>"},{"location":"programmeringmeddom.html#find-elementer","title":"Find elementer","text":"<p>Objektet document har en del metoder der kan benyttes til at finde elementer</p> <ul> <li>getElementById()</li> <li>querySelector() \u2013 getElementsByName() \u2013 getElementsByTagName() \u2013 getElementsByClassName()</li> <li>querySelectorAll()</li> </ul> <p>Bem\u00e6rk, at de fire sidste returnerer en samling! Du kan ogs\u00e5 v\u00e6lge selv at traversere gennem tr\u00e6et af elementer.</p> <p>Her er et par eksempler med udgangspunkt i f\u00f8lgende html:</p>"},{"location":"programmeringmeddom.html#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 id=\"ov\"&gt;Overskrift&lt;/h1&gt;\n&lt;h2&gt;underoverskrift&lt;/h2&gt;\n&lt;p&gt;Lang tekst&lt;/p&gt;\n&lt;ul&gt;\n&lt;li class=\"item\"&gt;liste punkt 1&lt;/li&gt;\n&lt;li&gt;liste punkt 2&lt;/li&gt;\n&lt;li class=\"item\"&gt;liste punkt 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;button id=\"knap\"&gt;Knap&lt;/button&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>"},{"location":"programmeringmeddom.html#appjs","title":"app.js","text":"<pre><code>(function () {\n// Find overskrift\nlet ov = document.getElementById(\"ov\");\nconsole.dir(ov);\n// Find knap (med querySelector)\nlet knap = document.querySelector(\"#knap\");\nconsole.dir(knap);\n// Find alle li\nlet li = document.querySelectorAll(\"li\");\nconsole.dir(li); // Array\n})();\n</code></pre>"},{"location":"programmeringmeddom.html#opdatering","title":"Opdatering","text":"<p>Afh\u00e6ngig af typen af element kan egenskaberne </p> <ul> <li>innerText</li> <li>innerHTML</li> <li>style</li> <li>attributes</li> <li>classList</li> <li>value</li> </ul> <p>benyttes til at opdatere v\u00e6rdier.</p>"},{"location":"programmeringmeddom.html#indexhtml_1","title":"index.html","text":"<pre><code> &lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 id=\"ov\"&gt;Overskrift&lt;/h1&gt;\n&lt;h2&gt;underoverskrift&lt;/h2&gt;\n&lt;p&gt;Lang tekst&lt;/p&gt;\n&lt;ul&gt;\n&lt;li class=\"item\"&gt;liste punkt 1&lt;/li&gt;\n&lt;li&gt;liste punkt 2&lt;/li&gt;\n&lt;li class=\"item\"&gt;liste punkt 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;button id=\"knap\"&gt;Knap&lt;/button&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programmeringmeddom.html#appjs_1","title":"app.js","text":"<pre><code>(function () {\n// Ny overskrift\nlet o = document.querySelector(\"#ov\");\no.innerHTML = \"Ny overskrift\";\n// farve til alle li\nlet li = document.querySelectorAll(\"li\");\nfor (var i = 0; i &lt; li.length; i++) {\nli[i].style.color = \"red\";\n}\n// klasse til knap (pas lige p\u00e5 \u00e6ldre browsere)\ndocument.querySelector(\"#knap\").classList.add(\"minKlasse\");\n})();\n</code></pre>"},{"location":"programmeringmeddom.html#hndelser","title":"H\u00e6ndelser","text":"<p>De fleste elementer har et hav af h\u00e6ndelse du kan binde kode til</p> <ul> <li>Mus</li> <li>click, mouseup, mouseover mv</li> <li>Keyboard</li> <li>keydown, keyup mc</li> <li>Window</li> <li>load (DOM ready), unload, resize mv</li> </ul> <p>H\u00e6ndelser kan benyttes ved at tilf\u00f8jes en funktion til afvikling - enten via</p> <ul> <li>addEventListener()</li> <li>overskrivning af on-metoder</li> <li>onclick</li> <li>onmouseup</li> <li>mv</li> </ul> <p>Yderligere styring i et tr\u00e6 af elementer (capture og bubbling) og kan ske gennem</p> <ul> <li>stopPropergation()</li> <li>stop h\u00e6ndelse</li> <li>preventDefault()</li> <li>forhindre en h\u00e6ndelse</li> </ul> <p>Her er et par eksempler:</p>"},{"location":"programmeringmeddom.html#indexhtml_2","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 id=\"ov\"&gt;Overskrift&lt;/h1&gt;\n&lt;h2&gt;underoverskrift&lt;/h2&gt;\n&lt;p&gt;Lang tekst&lt;/p&gt;\n&lt;ul&gt;\n&lt;li class=\"item\"&gt;liste punkt 1&lt;/li&gt;\n&lt;li&gt;liste punkt 2&lt;/li&gt;\n&lt;li class=\"item\"&gt;liste punkt 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;button id=\"knap\"&gt;Knap&lt;/button&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programmeringmeddom.html#appjs_2","title":"app.js","text":"<pre><code> (function () {\n// N\u00e5r der bliver klikket p\u00e5 knappen\nlet knap = document.querySelector(\"#knap\");\nknap.onclick = function () {\ndocument.querySelector(\"#ov\").style.color = \"red\";\n};\nlet ov = document.querySelector(\"#ov\");\nov.addEventListener(\"click\", function (e) {\nthis.style.color = \"black\";\n});\n})();\n</code></pre>"},{"location":"programmeringmeddom.html#opret-og-fjern-elementer","title":"Opret og fjern elementer","text":"<p>Elementer kan (blandt andet) oprettes med metoden createElement(), attributter tilf\u00f8jes med setAttribute() og sluttelig tilf\u00f8jes DOM med appendChild().</p>"},{"location":"programmeringmeddom.html#indexhtml_3","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 id=\"ov\"&gt;Overskrift&lt;/h1&gt;\n&lt;h2&gt;underoverskrift&lt;/h2&gt;\n&lt;p&gt;Lang tekst&lt;/p&gt;\n&lt;ul&gt;\n&lt;li class=\"item\"&gt;liste punkt 1&lt;/li&gt;\n&lt;li&gt;liste punkt 2&lt;/li&gt;\n&lt;li class=\"item\"&gt;liste punkt 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;button id=\"knap\"&gt;Knap&lt;/button&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"programmeringmeddom.html#appjs_3","title":"app.js","text":"<pre><code>(function () {\n// Find ul\nlet ul = document.querySelectorAll(\"ul\")[0];\n// Opret li\nlet li = document.createElement(\"li\");\nli.setAttribute(\"id\", \"minId\");\nli.innerHTML = \"liste punkt 4\";\n// Tilf\u00f8j li\nul.appendChild(li);\n// Fjern knap\nlet knap = document.querySelector(\"#knap\");\ndocument.querySelector(\"body\").removeChild(knap);\n})();\n</code></pre>"}]}